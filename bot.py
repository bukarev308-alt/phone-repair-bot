import telebot
from telebot import types
import json

TOKEN = "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
DATA_FILE = "data.json"
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
try:
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
except:
    data = {"stores": {}}

def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
def main_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", callback_data="stores"))
    markup.add(types.InlineKeyboardButton("üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏", callback_data="phones"))
    markup.add(types.InlineKeyboardButton("üìä –ü—ñ–¥—Å—É–º–∫–∏", callback_data="summary"))
    return markup

# –ú–µ–Ω—é –º–∞–≥–∞–∑–∏–Ω—ñ–≤
def stores_markup():
    markup = types.InlineKeyboardMarkup()
    for store in data["stores"]:
        markup.add(types.InlineKeyboardButton(f"üóëÔ∏è {store}", callback_data=f"delstore|{store}"))
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω", callback_data="addstore"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return markup

# –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –º–∞–≥–∞–∑–∏–Ω—ñ–≤ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
def phones_markup():
    markup = types.InlineKeyboardMarkup()
    for store in data["stores"]:
        markup.add(types.InlineKeyboardButton(f"üìÇ {store}", callback_data=f"store|{store}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back"))
    return markup

# –ú–µ–Ω—é —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É –º–∞–≥–∞–∑–∏–Ω—ñ
def store_phones_markup(store):
    markup = types.InlineKeyboardMarkup()
    for i, phone in enumerate(data["stores"][store]):
        text = f"{phone['name']} {phone['model']} üí∞{phone['price']}‚Ç¥"
        markup.add(types.InlineKeyboardButton(f"‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ {text}", callback_data=f"editphone|{store}|{i}"))
        markup.add(types.InlineKeyboardButton(f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ {text}", callback_data=f"delphone|{store}|{i}"))
    markup.add(types.InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", callback_data=f"addphone|{store}"))
    markup.add(types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="phones"))
    return markup

# –ü—ñ–¥—Å—É–º–∫–∏
def summary_text():
    total_count = 0
    total_sum = 0
    msg = "üìä –ü—ñ–¥—Å—É–º–∫–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:\n\n"
    for store, phones in data["stores"].items():
        count = len(phones)
        summ = sum(p['price'] for p in phones)
        total_count += count
        total_sum += summ
        msg += f"üè™ {store}: {count} —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤, üí∞{summ}‚Ç¥\n"
    msg += f"\nüìà –ó–∞–≥–∞–ª–æ–º: {total_count} —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤, üí∞{total_sum}‚Ç¥"
    return msg

# === –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥ ===
@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_markup())

# === Callback Query Handler ===
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    global temp_store, temp_phone_idx
    data_text = call.data.split("|")
    
    if call.data == "back":
        bot.edit_message_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", call.message.chat.id, call.message.message_id, reply_markup=main_markup())
    
    elif call.data == "stores":
        bot.edit_message_text("–ú–∞–≥–∞–∑–∏–Ω–∏:", call.message.chat.id, call.message.message_id, reply_markup=stores_markup())
    
    elif call.data == "phones":
        bot.edit_message_text("–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", call.message.chat.id, call.message.message_id, reply_markup=phones_markup())
    
    elif call.data == "summary":
        bot.edit_message_text(summary_text(), call.message.chat.id, call.message.message_id, reply_markup=main_markup())
    
    # –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω
    elif call.data == "addstore":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:")
        bot.register_next_step_handler(msg, add_store_step)
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω
    elif data_text[0] == "delstore":
        store = data_text[1]
        if store in data["stores"]:
            del data["stores"][store]
            save_data()
            bot.edit_message_text(f"–ú–∞–≥–∞–∑–∏–Ω '{store}' –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", call.message.chat.id, call.message.message_id, reply_markup=stores_markup())
    
    # –í–∏–±—ñ—Ä –º–∞–≥–∞–∑–∏–Ω—É –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
    elif data_text[0] == "store":
        store = data_text[1]
        temp_store = store
        bot.edit_message_text(f"–¢–µ–ª–µ—Ñ–æ–Ω–∏ —É {store}:", call.message.chat.id, call.message.message_id, reply_markup=store_phones_markup(store))
    
    # –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    elif data_text[0] == "addphone":
        store = data_text[1]
        temp_store = store
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –¥–∞–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞, –ú–æ–¥–µ–ª—å, –ü—Ä–æ–±–ª–µ–º–∞, –¶—ñ–Ω–∞")
        bot.register_next_step_handler(msg, add_phone_step)
    
    # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    elif data_text[0] == "delphone":
        store = data_text[1]
        idx = int(data_text[2])
        del data["stores"][store][idx]
        save_data()
        bot.edit_message_text(f"–¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", call.message.chat.id, call.message.message_id, reply_markup=store_phones_markup(store))
    
    # –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    elif data_text[0] == "editphone":
        store = data_text[1]
        idx = int(data_text[2])
        temp_store = store
        temp_phone_idx = idx
        phone = data["stores"][store][idx]
        msg = bot.send_message(call.message.chat.id, f"–†–µ–¥–∞–≥—É–π —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞, –ú–æ–¥–µ–ª—å, –ü—Ä–æ–±–ª–µ–º–∞, –¶—ñ–Ω–∞\n–ü–æ—Ç–æ—á–Ω—ñ: {phone}")
        bot.register_next_step_handler(msg, edit_phone_step)

# === –§—É–Ω–∫—Ü—ñ—ó –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ===
def add_store_step(message):
    name = message.text.strip()
    if name and name not in data["stores"]:
        data["stores"][name] = []
        save_data()
        bot.send_message(message.chat.id, f"–ú–∞–≥–∞–∑–∏–Ω '{name}' –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=stores_markup())
    else:
        bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –ø—É—Å—Ç–∏–π ‚ùå", reply_markup=stores_markup())

def add_phone_step(message):
    try:
        name, model, problem, price = [x.strip() for x in message.text.split(",")]
        price = int(price)
        data["stores"][temp_store].append({"name": name, "model": model, "problem": problem, "price": price})
        save_data()
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=store_phones_markup(temp_store))
    except:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É ‚ùå", reply_markup=store_phones_markup(temp_store))

def edit_phone_step(message):
    try:
        name, model, problem, price = [x.strip() for x in message.text.split(",")]
        price = int(price)
        data["stores"][temp_store][temp_phone_idx] = {"name": name, "model": model, "problem": problem, "price": price}
        save_data()
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ ‚úÖ", reply_markup=store_phones_markup(temp_store))
    except:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É ‚ùå", reply_markup=store_phones_markup(temp_store))

# –ó–∞–ø—É—Å–∫
temp_store = ""
temp_phone_idx = 0
bot.infinity_polling()