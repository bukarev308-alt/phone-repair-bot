# bot_weekly_archive.py
import os
import json
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
bot = TeleBot(TOKEN)
DATA_FILE = "data.json"
DATE_FORMAT = "%d.%m.%Y %H:%M"

# =======================
# –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
# =======================
DEFAULT_DATA = {
    "stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"],
    # current_week_key –∑–±–µ—Ä—ñ–≥–∞—î –Ω–∞–∑–≤—É –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∂–Ω—è "–¢–∏–∂–¥–µ–Ω—å dd.mm.yyyy ‚Äî dd.mm.yyyy"
    "current_week_key": None,
    # weeks: —Å–ª–æ–≤–Ω–∏–∫, –≤ —è–∫–æ–º—É –∫–ª—é—á = current_week_key, –∑–Ω–∞—á–µ–Ω–Ω—è = —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏–π)
    "weeks": {},
    # archive: –º—ñ—Å—Ç–∏—Ç—å –≤—Å—ñ –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Ç–∏–∂–Ω—ñ { "–¢–∏–∂–¥–µ–Ω—å ...": [phones...] }
    "archive": {}
}

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø / –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
# =======================
def load_data():
    if not os.path.exists(DATA_FILE):
        d = DEFAULT_DATA.copy()
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
        current_key = get_week_label_for_date(datetime.now().date())
        d["current_week_key"] = current_key
        d["weeks"] = {current_key: []}
        save_data(d)
        return d

    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            d = json.load(f)
        except json.JSONDecodeError:
            # —è–∫—â–æ —Ñ–∞–π–ª –ø–æ—à–∫–æ–¥–∂–µ–Ω–∏–π ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π
            d = DEFAULT_DATA.copy()
            current_key = get_week_label_for_date(datetime.now().date())
            d["current_week_key"] = current_key
            d["weeks"] = {current_key: []}
            save_data(d)
            return d

    # –Ø–∫—â–æ —Å—Ç–∞—Ä–∏–π —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —î "phones" –±–µ–∑ —Ä–æ–∑–±–∏—Ç—Ç—è) ‚Äî –º—ñ–≥—Ä—É—î–º–æ
    if "phones" in d and ("weeks" not in d and "archive" not in d):
        d = migrate_old_flat_data(d)
    # –ó–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –≤—Å—ñ—Ö –∫–ª—é—á—ñ–≤
    for k in DEFAULT_DATA:
        if k not in d:
            d[k] = DEFAULT_DATA[k] if k != "current_week_key" else None

    # –ü–µ—Ä–µ–∫–æ–Ω–∞—Ç–∏—Å—è, —â–æ current_week_key —ñ—Å–Ω—É—î —ñ –≤ weeks —î —Ü–µ–π –∫–ª—é—á
    if not d.get("current_week_key"):
        current_key = get_week_label_for_date(datetime.now().date())
        d["current_week_key"] = current_key
    if d.get("current_week_key") not in d.get("weeks", {}):
        # —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
        if "weeks" not in d:
            d["weeks"] = {}
        d["weeks"][d["current_week_key"]] = []

    save_data(d)
    return d

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def migrate_old_flat_data(d_old):
    """
    –ú—ñ–≥—Ä–∞—Ü—ñ—è –∑—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏:
    { "stores": [...], "phones": [...] }
    –≤ –Ω–æ–≤—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É DEFAULT_DATA –∑ –ø–æ—Ç–æ—á–Ω–∏–º —Ç–∏–∂–Ω–µ–º.
    """
    d = DEFAULT_DATA.copy()
    # –∑–±–µ—Ä–µ–∂–µ–º–æ –º–∞–≥–∞–∑–∏–Ω–∏ —è–∫—â–æ –±—É–ª–∏
    if "stores" in d_old:
        d["stores"] = d_old["stores"]
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
    current_key = get_week_label_for_date(datetime.now().date())
    d["current_week_key"] = current_key
    d["weeks"] = {current_key: []}
    d["archive"] = {}
    phones = d_old.get("phones", [])
    # –ø–æ–º—ñ—Å—Ç–∏—Ç–∏ –≤—Å—ñ —Å—Ç–∞—Ä—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –≤ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
    d["weeks"][current_key] = phones
    save_data(d)
    return d

# =======================
# –î–û–ü–û–ú–û–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –î–ê–¢ –¢–ê –¢–ò–ñ–ù–Ü–í
# =======================
def get_week_start(date_obj):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É —Ç–∏–∂–Ω—è (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫) –¥–ª—è given date_obj (date)
    """
    # date_obj - datetime.date
    weekday = date_obj.weekday()  # 0 = Monday
    start = date_obj - timedelta(days=weekday)
    return start

def get_week_end(date_obj):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞—Ç—É –∫—ñ–Ω—Ü—è —Ç–∏–∂–Ω—è (–Ω–µ–¥—ñ–ª—è) –¥–ª—è given date_obj (date)
    """
    start = get_week_start(date_obj)
    end = start + timedelta(days=6)
    return end

def date_to_str(d):
    return d.strftime("%d.%m.%Y")

def get_week_label_for_date(date_obj):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫: "–¢–∏–∂–¥–µ–Ω—å dd.mm.yyyy ‚Äî dd.mm.yyyy"
    –¥–ª—è —Ç–∏–∂–Ω—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å date_obj
    """
    start = get_week_start(date_obj)
    end = get_week_end(date_obj)
    return f"–¢–∏–∂–¥–µ–Ω—å {date_to_str(start)} ‚Äî {date_to_str(end)}"

def ensure_current_week_exists(data):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î current_week_key —ñ —Å—Ç–≤–æ—Ä—é—î —Ç–∏–∂–¥–µ–Ω—å, —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î.
    """
    cur_key = data.get("current_week_key")
    if not cur_key:
        cur_key = get_week_label_for_date(datetime.now().date())
        data["current_week_key"] = cur_key
    if cur_key not in data.get("weeks", {}):
        if "weeks" not in data:
            data["weeks"] = {}
        data["weeks"][cur_key] = []
    return data

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}  # chat_id -> {"stack": [], "tmp": {}}

def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        return user_state[chat_id]["stack"].pop()
    return None

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ò–ú–û –î–ê–ù–Ü –í –ü–ê–ú'–Ø–¢–¨
# =======================
data = load_data()
ensure_current_week_exists(data)

# =======================
# Keyboards
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.row("üìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å", "üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å")
    kb.row("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üßπ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å")
    kb.row("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å", "–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def view_choice_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", "üì¶ –ê—Ä—Ö—ñ–≤")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# START
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone_start(message):
    chat_id = message.chat.id
    ensure_current_week_exists(data)
    push_state(chat_id, "add_store")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())

# =======================
# –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø / –í–ò–î–ê–õ–ï–ù–ù–Ø (—Ç—ñ–ª—å–∫–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å)
# =======================
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏")
def edit_phone_start(message):
    chat_id = message.chat.id
    ensure_current_week_exists(data)
    cur_key = data["current_week_key"]
    phones = data["weeks"].get(cur_key, [])
    if not phones:
        bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–µ–º–∞—î.", reply_markup=main_menu())
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i, p in enumerate(phones, 1):
        kb.add(f"{i}. {p['model']} ({p['store']})")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    push_state(chat_id, "edit_select")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)

# =======================
# –ì–ï–ù–ï–†–ò–ß–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö
# =======================
field_map = {"–ú–∞–≥–∞–∑–∏–Ω": "store", "–ú–æ–¥–µ–ª—å": "model", "–ü—Ä–æ–±–ª–µ–º–∞": "problem", "–¶—ñ–Ω–∞": "price"}

@bot.message_handler(func=lambda m: True)
def generic_handler(message):
    chat_id = message.chat.id
    txt = message.text.strip() if message.text else ""
    state = current_state(chat_id)

    # –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –ö–û–ú–ê–ù–î–ò
    if txt == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏":
        push_state(chat_id, "view_choice")
        bot.send_message(chat_id, "–ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏:", reply_markup=view_choice_menu())
        return

    if txt == "üìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å":
        ensure_current_week_exists(data)
        cur_key = data["current_week_key"]
        phones = data["weeks"].get(cur_key, [])
        if not phones:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            return
        total = sum(p["price"] for p in phones)
        count = len(phones)
        stores_summary = {}
        for p in phones:
            stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
        store_text = "\n".join(f"‚Ä¢ {s}: {v} –≥—Ä–Ω" for s, v in stores_summary.items())
        bot.send_message(chat_id,
                         f"üìä –ü—ñ–¥—Å—É–º–æ–∫ ‚Äî {cur_key}\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {count}\nüí∞ –°—É–º–∞: {total} –≥—Ä–Ω\n\n<b>–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:</b>\n{store_text}",
                         parse_mode="HTML", reply_markup=main_menu())
        return

    if txt == "üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å":
        ensure_current_week_exists(data)
        # –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –∑ archive + –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å, —è–∫—ñ –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
        now = datetime.now().date()
        month = now.month
        year = now.year
        total = 0
        count = 0
        stores_summary = {}
        # –∞—Ä—Ö—ñ–≤
        for week_label, phones in data.get("archive", {}).items():
            # –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∑ —è—Ä–ª–∏–∫–∞ "–¢–∏–∂–¥–µ–Ω—å dd.mm.yyyy ‚Äî dd.mm.yyyy"
            try:
                dates_part = week_label.replace("–¢–∏–∂–¥–µ–Ω—å ", "")
                start_str, end_str = [s.strip() for s in dates_part.split("‚Äî")]
                start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
                # if any date in that week is in the month -> –≤—Ä–∞—Ö–æ–≤—É—î–º–æ –≤–µ—Å—å —Ç–∏–∂–¥–µ–Ω—å
                if start_date.month == month and start_date.year == year:
                    for p in phones:
                        total += p["price"]
                        count += 1
                        stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
            except Exception:
                # —è–∫—â–æ —Ñ–æ—Ä–º–∞—Ç —ñ–Ω—à–∏–π ‚Äî –ø—Ä–æ—Å—Ç–æ —ñ–≥–Ω–æ—Ä—É—î–º–æ
                continue
        # –ø–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
        cur_key = data["current_week_key"]
        if cur_key:
            # –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å—Ç–∞—Ä—Ç —Ç–∏–∂–Ω—è
            try:
                dates_part = cur_key.replace("–¢–∏–∂–¥–µ–Ω—å ", "")
                start_str, end_str = [s.strip() for s in dates_part.split("‚Äî")]
                start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
                if start_date.month == month and start_date.year == year:
                    for p in data["weeks"].get(cur_key, []):
                        total += p["price"]
                        count += 1
                        stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
            except Exception:
                pass

        if count == 0:
            bot.send_message(chat_id, "üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.", reply_markup=main_menu())
            return
        store_text = "\n".join(f"‚Ä¢ {s}: {v} –≥—Ä–Ω" for s, v in stores_summary.items())
        bot.send_message(chat_id,
                         f"üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ {now.strftime('%B %Y')}\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {count}\nüí∞ –°—É–º–∞: {total} –≥—Ä–Ω\n\n<b>–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:</b>\n{store_text}",
                         parse_mode="HTML", reply_markup=main_menu())
        return

    if txt == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏":
        text = "üè™ <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤:</b>\n" + "\n".join(f"‚Ä¢ {s}" for s in data["stores"])
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        return

    if txt == "üßπ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å":
        # –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –≤ archive –ø—ñ–¥ –∫–ª—é—á "–¢–∏–∂–¥–µ–Ω—å dd.mm.yyyy ‚Äî dd.mm.yyyy"
        ensure_current_week_exists(data)
        cur_key = data["current_week_key"]
        phones = data["weeks"].get(cur_key, [])
        # —Å—Ç–≤–æ—Ä–∏—Ç–∏ —è—Ä–ª–∏–∫ –Ω–æ–≤–æ–≥–æ –∞—Ä—Ö—ñ–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ (–≤–∂–µ cur_key)
        if phones:
            data["archive"][cur_key] = phones
        # —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π current_week_key (–¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏)
        # –ù–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑–∞–≤–∂–¥–∏ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ –ø–æ–Ω–µ–¥—ñ–ª–∫–∞ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
        today = datetime.now().date()
        new_key = get_week_label_for_date(today)
        # —è–∫—â–æ new_key == cur_key (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–µ—Ä–µ—Ö–æ–¥–∏—à –≤ —Å–µ—Ä–µ–¥–∏–Ω—ñ —Ç–∏–∂–Ω—è) ‚Äî —Ç—Ä–µ–±–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å
        if new_key == cur_key:
            # –ø–µ—Ä–µ—Å—É–Ω—É—Ç–∏ –≤–ø–µ—Ä–µ–¥ –Ω–∞ 7 –¥–Ω—ñ–≤
            next_monday = get_week_start(today) + timedelta(days=7)
            new_key = get_week_label_for_date(next_monday)
        data["current_week_key"] = new_key
        data["weeks"][new_key] = []
        # –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ä–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑—ñ weeks (—â–æ–± weeks –º—ñ—Å—Ç–∏–≤ –ª–∏—à–µ –∞–∫—Ç–∏–≤–Ω–∏–π)
        if cur_key in data["weeks"]:
            data["weeks"].pop(cur_key, None)
        save_data(data)
        bot.send_message(chat_id, f"‚úÖ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤ —è–∫:\n<b>{cur_key}</b>\n–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å:\n<b>{new_key}</b>", parse_mode="HTML", reply_markup=main_menu())
        return

    # -----------------------
    # –ù–ê–ó–ê–î
    # -----------------------
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        prev = pop_state(chat_id)
        state = current_state(chat_id)
        # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ state
        if not state:
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        else:
            # —è–∫—â–æ –º–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å —É –≤–∏–±—ñ—Ä –ø–µ—Ä–µ–≥–ª—è–¥—É
            if state == "add_store":
                bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())
            elif state == "add_model":
                bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
            elif state == "edit_select":
                # –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
                cur_key = data["current_week_key"]
                phones = data["weeks"].get(cur_key, [])
                if phones:
                    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    for i, p in enumerate(phones, 1):
                        kb.add(f"{i}. {p['model']} ({p['store']})")
                    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
                    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)
                else:
                    bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            else:
                bot.send_message(chat_id, "–ü–æ–≤–µ—Ä–Ω—É—Ç–æ.", reply_markup=main_menu())
        return

    # =======================
    # –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£ (—Å—Ç–∞–Ω–∏)
    # =======================
    if state == "add_store":
        if txt == "‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω":
            push_state(chat_id, "add_new_store")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:", reply_markup=back_button())
            return
        elif txt in data["stores"]:
            ensure_state(chat_id)
            user_state[chat_id]["tmp"]["store"] = txt
            push_state(chat_id, "add_model")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
            return
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π.", reply_markup=stores_menu())
            return

    if state == "add_new_store":
        store_name = txt.strip()
        if store_name and store_name not in data["stores"]:
            data["stores"].append(store_name)
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´{store_name}¬ª –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        else:
            bot.send_message(chat_id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–∞–∑–≤–∞ –ø—É—Å—Ç–∞.", reply_markup=back_button())
        pop_state(chat_id)
        return

    if state == "add_model":
        user_state[chat_id]["tmp"]["model"] = txt
        push_state(chat_id, "add_problem")
        bot.send_message(chat_id, "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
        return

    if state == "add_problem":
        user_state[chat_id]["tmp"]["problem"] = txt
        push_state(chat_id, "add_price")
        bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —Ä–µ–º–æ–Ω—Ç—É (—á–∏—Å–ª–æ–º):", reply_markup=back_button())
        return

    if state == "add_price":
        try:
            # –¥–æ–∑–≤–æ–ª—è—î–º–æ —á–∏—Å–ª–∞ –∑ –¥–µ—Å—è—Ç–∫–æ–≤–∏–º–∏ –∞–±–æ —Ü—ñ–ª–∏–º–∏
            price = float(txt.replace(",", "."))
            user_state[chat_id]["tmp"]["price"] = price
            # —Å—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–ø–∏—Å —ñ –¥–æ–¥–∞—î–º–æ –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
            cur_key = data["current_week_key"]
            if not cur_key:
                cur_key = get_week_label_for_date(datetime.now().date())
                data["current_week_key"] = cur_key
            phone = {
                "store": user_state[chat_id]["tmp"]["store"],
                "model": user_state[chat_id]["tmp"]["model"],
                "problem": user_state[chat_id]["tmp"]["problem"],
                "price": price,
                "date": datetime.now().strftime(DATE_FORMAT)
            }
            if "weeks" not in data:
                data["weeks"] = {}
            if cur_key not in data["weeks"]:
                data["weeks"][cur_key] = []
            data["weeks"][cur_key].append(phone)
            save_data(data)
            bot.send_message(chat_id, "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 1200 –∞–±–æ 1200.50).", reply_markup=back_button())
        return

    # =======================
    # –ü–ï–†–ï–ì–õ–Ø–î (–≤–∏–±—ñ—Ä –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ç–∏–∂–Ω—è –∞–±–æ –∞—Ä—Ö—ñ–≤—É)
    # =======================
    if state == "view_choice":
        if txt == "üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å":
            ensure_current_week_exists(data)
            cur_key = data["current_week_key"]
            phones = data["weeks"].get(cur_key, [])
            if not phones:
                bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —É –ø–æ—Ç–æ—á–Ω–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–µ–º–∞—î.", reply_markup=main_menu())
                clear_state(chat_id)
                return
            text = f"üìã <b>–¢–µ–ª–µ—Ñ–æ–Ω–∏ ‚Äî {cur_key}:</b>\n\n"
            for i, p in enumerate(phones, 1):
                text += (f"{i}. {p['model']} ({p['store']})\n"
                         f"üîß {p['problem']}\n"
                         f"üí∞ {p['price']} –≥—Ä–Ω\n"
                         f"üïí {p['date']}\n\n")
            bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
            clear_state(chat_id)
            return
        elif txt == "üì¶ –ê—Ä—Ö—ñ–≤":
            # –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ —Ç–∏–∂–Ω—ñ–≤ (–∫–æ—Ä–æ—Ç–∫—ñ –∑–≤—ñ—Ç–∏)
            if not data.get("archive"):
                bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
                clear_state(chat_id)
                return
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            # —Å–æ—Ä—Ç—É–≤–∞—Ç–∏ –∞—Ä—Ö—ñ–≤ –∑–∞ –¥–∞—Ç–æ—é –ø–æ—á–∞—Ç–∫—É (–æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–≥–æ—Ä—ñ)
            entries = []
            for week_label, phones in data["archive"].items():
                # –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫
                cnt = len(phones)
                total = sum(p["price"] for p in phones) if phones else 0
                entries.append((week_label, cnt, total))
            # —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –ø–æ –¥–∞—Ç—ñ –ø–æ—á–∞—Ç–∫—É: —Ä–æ–∑–±—ñ—Ä –¥–∞—Ç–∏ –∑ —Ä—è–¥–∫–∞
            def parse_start(label):
                try:
                    dates_part = label.replace("–¢–∏–∂–¥–µ–Ω—å ", "")
                    start_str, _ = [s.strip() for s in dates_part.split("‚Äî")]
                    return datetime.strptime(start_str, "%d.%m.%Y")
                except:
                    return datetime.min
            entries.sort(key=lambda x: parse_start(x[0]), reverse=True)
            for week_label, cnt, total in entries:
                kb.add(f"{week_label} ‚Äî {cnt} –æ–¥., {int(total)} –≥—Ä–Ω")
            kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            push_state(chat_id, "archive_list")
            bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å (–∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç):", reply_markup=kb)
            return
        else:
            bot.send_message(chat_id, "‚ùå –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç.", reply_markup=view_choice_menu())
            return

    if state == "archive_list":
        # –ö–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±–∏—Ä–∞—î —Ä—è–¥–æ–∫ –∞—Ä—Ö—ñ–≤—É ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –±–µ–∑ –¥–µ—Ç–∞–ª–µ–π
        # txt –º–∞—î —Ñ–æ—Ä–º–∞—Ç "–¢–∏–∂–¥–µ–Ω—å dd.mm.yyyy ‚Äî dd.mm.yyyy ‚Äî X –æ–¥., Y –≥—Ä–Ω"
        parts = txt.split("‚Äî")
        if len(parts) >= 3:
            # –∑–Ω–∞–π–¥–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π week_label —É archive (–ø–æ—à—É–∫ –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó —á–∞—Å—Ç–∏–Ω–∏)
            chosen_label = None
            for week_label in data.get("archive", {}):
                if week_label in txt:
                    chosen_label = week_label
                    break
            if chosen_label:
                phones = data["archive"][chosen_label]
                cnt = len(phones)
                total = sum(p["price"] for p in phones) if phones else 0
                # –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç (–±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤)
                bot.send_message(chat_id, f"üì¶ <b>{chosen_label}</b>\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {cnt}\nüí∞ –°—É–º–∞: {int(total)} –≥—Ä–Ω", parse_mode="HTML", reply_markup=main_menu())
                clear_state(chat_id)
                return
        bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=main_menu())
        clear_state(chat_id)
        return

    # =======================
    # –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø / –í–ò–î–ê–õ–ï–ù–ù–Ø (—Å—Ç–∞–Ω–∏)
    # =======================
    if state == "edit_select":
        try:
            idx = int(txt.split(".")[0]) - 1
            cur_key = data["current_week_key"]
            phones = data["weeks"].get(cur_key, [])
            if 0 <= idx < len(phones):
                user_state[chat_id]["tmp"]["edit_idx"] = idx
                push_state(chat_id, "edit_action")
                bot.send_message(chat_id, "–û–±—Ä–∞—Ç–∏ –¥—ñ—é:", reply_markup=edit_action_menu())
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=back_button())
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=back_button())
        return

    if state == "edit_action":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        cur_key = data["current_week_key"]
        phones = data["weeks"].get(cur_key, [])
        if txt == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏":
            push_state(chat_id, "edit_field")
            bot.send_message(chat_id, "–©–æ —Ä–µ–¥–∞–≥—É—î–º–æ?", reply_markup=edit_field_menu())
        elif txt == "üóë –í–∏–¥–∞–ª–∏—Ç–∏":
            push_state(chat_id, "confirm_delete")
            bot.send_message(chat_id, f"–í–∏–¥–∞–ª–∏—Ç–∏ {phones[idx]['model']}?", reply_markup=confirm_delete_menu())
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é.", reply_markup=edit_action_menu())
        return

    if state == "edit_field":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        user_state[chat_id]["tmp"]["field"] = txt
        push_state(chat_id, "edit_enter")
        bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {txt}:", reply_markup=back_button())
        return

    if state == "edit_enter":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        field = user_state[chat_id]["tmp"]["field"]
        cur_key = data["current_week_key"]
        phones = data["weeks"].get(cur_key, [])
        if idx >= len(phones) or idx < 0:
            bot.send_message(chat_id, "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        value = txt
        if field == "–¶—ñ–Ω–∞":
            try:
                value_num = float(value.replace(",", "."))
                phones[idx]["price"] = value_num
            except:
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.", reply_markup=back_button())
                return
        elif field == "–ú–∞–≥–∞–∑–∏–Ω":
            # —è–∫—â–æ –º–∞–≥–∞–∑–∏–Ω—É –Ω–µ–º–∞—î –≤ —Å–ø–∏—Å–∫—É ‚Äî –¥–æ–¥–∞—î–º–æ
            if value not in data["stores"]:
                data["stores"].append(value)
            phones[idx]["store"] = value
        else:
            key = field_map.get(field)
            if key:
                phones[idx][key] = value
        # –∑–±–µ—Ä–µ–≥—Ç–∏
        data["weeks"][cur_key] = phones
        save_data(data)
        bot.send_message(chat_id, f"‚úÖ {field} –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
        clear_state(chat_id)
        return

    if state == "confirm_delete":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        cur_key = data["current_week_key"]
        phones = data["weeks"].get(cur_key, [])
        if txt == "‚úÖ –¢–∞–∫":
            if 0 <= idx < len(phones):
                removed = phones.pop(idx)
                data["weeks"][cur_key] = phones
                save_data(data)
                bot.send_message(chat_id, f"üóë –¢–µ–ª–µ—Ñ–æ–Ω {removed['model']} –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=main_menu())
            else:
                bot.send_message(chat_id, "‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
        else:
            bot.send_message(chat_id, "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
        clear_state(chat_id)
        return

    # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ:
    bot.send_message(chat_id, "–Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∫–æ–º–∞–Ω–¥—É. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()