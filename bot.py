import telebot
from telebot import types
import json

# === –¢–í–û–á –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
TOKEN = "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
ALLOWED_USER_ID = 123456789  # <- —Ç–≤—ñ–π Telegram ID
DATA_FILE = "data.json"

bot = telebot.TeleBot(TOKEN)

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
try:
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
except:
    data = {"stores": {}}

# === –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ===
def save_data():
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
def is_allowed(message):
    return message.from_user.id == ALLOWED_USER_ID

# === –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é ===
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏")
    markup.row("üìä –ü—ñ–¥—Å—É–º–∫–∏")
    return markup

# === –ú–∞–≥–∞–∑–∏–Ω–∏ –º–µ–Ω—é ===
def stores_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for store in data["stores"]:
        markup.add(f"üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ {store}")
    markup.row("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

# === –¢–µ–ª–µ—Ñ–æ–Ω–∏ –º–µ–Ω—é (—Å–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤) ===
def phones_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for store in data["stores"]:
        markup.add(f"üìÇ {store}")
    markup.row("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

# === –¢–µ–ª–µ—Ñ–æ–Ω–∏ –º–∞–≥–∞–∑–∏–Ω—É (–¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è) ===
def store_phones_menu(store_name):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    phones = data["stores"].get(store_name, [])
    for idx, phone in enumerate(phones):
        text = f"{phone['name']} {phone['model']} üí∞ {phone['price']} –≥—Ä–Ω"
        markup.add(f"‚úèÔ∏è {idx} {text}", f"üóëÔ∏è {idx} {text}")
    markup.row("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return markup

# === –ü—ñ–¥—Å—É–º–∫–∏ ===
def summary_text():
    total_count = 0
    total_sum = 0
    msg = ""
    for store, phones in data["stores"].items():
        count = len(phones)
        summ = sum([p["price"] for p in phones])
        total_count += count
        total_sum += summ
        msg += f"üè™ {store}: {count} —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤, üí∞ {summ} –≥—Ä–Ω\n"
    msg += f"\nüìà –ó–∞–≥–∞–ª–æ–º: {total_count} —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤, üí∞ {total_sum} –≥—Ä–Ω"
    return msg

# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
@bot.message_handler(func=lambda m: True)
def handle_message(message):
    if not is_allowed(message):
        return

    text = message.text

    if text == "/start":
        bot.send_message(message.chat.id, "–í–∏–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())
    
    # –ú–∞–≥–∞–∑–∏–Ω–∏
    elif text == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏":
        bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω–∏:", reply_markup=stores_menu())
    
    elif text.startswith("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω"):
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:")
        bot.register_next_step_handler(msg, add_store)
    
    elif text.startswith("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ "):
        store_name = text.replace("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ ", "")
        if store_name in data["stores"]:
            del data["stores"][store_name]
            save_data()
            bot.send_message(message.chat.id, f"–ú–∞–≥–∞–∑–∏–Ω '{store_name}' –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=stores_menu())
        else:
            bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå", reply_markup=stores_menu())

    # –¢–µ–ª–µ—Ñ–æ–Ω–∏
    elif text == "üì± –¢–µ–ª–µ—Ñ–æ–Ω–∏":
        bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=phones_menu())

    elif text.startswith("üìÇ "):
        store_name = text.replace("üìÇ ", "")
        bot.send_message(message.chat.id, f"–¢–µ–ª–µ—Ñ–æ–Ω–∏ —É {store_name}:", reply_markup=store_phones_menu(store_name))

    elif text.startswith("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω"):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –¥–∞–Ω—ñ —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞, –ú–æ–¥–µ–ª—å, –ü—Ä–æ–±–ª–µ–º–∞, –¶—ñ–Ω–∞")
        bot.register_next_step_handler(message, lambda m: add_phone_step(m, last_store))

    # –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É
    elif text.startswith("‚úèÔ∏è") or text.startswith("üóëÔ∏è"):
        try:
            parts = text.split(" ", 2)
            action = parts[0]
            idx = int(parts[1])
            store_name = last_store  # –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∏–±—Ä–∞–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω
            if action == "üóëÔ∏è":
                del data["stores"][store_name][idx]
                save_data()
                bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ ‚úÖ", reply_markup=store_phones_menu(store_name))
            elif action == "‚úèÔ∏è":
                phone = data["stores"][store_name][idx]
                msg = bot.send_message(message.chat.id, f"–†–µ–¥–∞–≥—É–π —Ç–µ–ª–µ—Ñ–æ–Ω —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n–ù–∞–∑–≤–∞, –ú–æ–¥–µ–ª—å, –ü—Ä–æ–±–ª–µ–º–∞, –¶—ñ–Ω–∞\n–ü–æ—Ç–æ—á–Ω—ñ: {phone}")
                bot.register_next_step_handler(msg, lambda m: edit_phone_step(m, store_name, idx))
        except Exception as e:
            bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ ‚ùå", reply_markup=phones_menu())

    # –ü—ñ–¥—Å—É–º–∫–∏
    elif text == "üìä –ü—ñ–¥—Å—É–º–∫–∏":
        bot.send_message(message.chat.id, summary_text(), reply_markup=main_menu())
    
    # –ù–∞–∑–∞–¥
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ü–æ–≤–µ—Ä–Ω—É–≤—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
    
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞ ‚ùå", reply_markup=main_menu())

# === –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É ===
def add_store(message):
    store_name = message.text.strip()
    if store_name and store_name not in data["stores"]:
        data["stores"][store_name] = []
        save_data()
        bot.send_message(message.chat.id, f"–ú–∞–≥–∞–∑–∏–Ω '{store_name}' –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=stores_menu())
    else:
        bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –ø—É—Å—Ç–∏–π ‚ùå", reply_markup=stores_menu())

# === –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É ===
def add_phone_step(message, store_name):
    try:
        name, model, problem, price = [x.strip() for x in message.text.split(",")]
        price = int(price)
        data["stores"][store_name].append({
            "name": name,
            "model": model,
            "problem": problem,
            "price": price
        })
        save_data()
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ ‚úÖ", reply_markup=store_phones_menu(store_name))
    except:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É ‚ùå", reply_markup=store_phones_menu(store_name))

# === –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É ===
def edit_phone_step(message, store_name, idx):
    try:
        name, model, problem, price = [x.strip() for x in message.text.split(",")]
        price = int(price)
        data["stores"][store_name][idx] = {
            "name": name,
            "model": model,
            "problem": problem,
            "price": price
        }
        save_data()
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥—Ä–µ–¥–∞–≥–æ–≤–∞–Ω–æ ‚úÖ", reply_markup=store_phones_menu(store_name))
    except:
        bot.send_message(message.chat.id, "–ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É ‚ùå", reply_markup=store_phones_menu(store_name))

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
last_store = ""  # –¥–ª—è –∑–∞–ø–∞–º‚Äô—è—Ç–æ–≤—É–≤–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É
bot.infinity_polling()