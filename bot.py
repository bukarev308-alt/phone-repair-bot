import os
import json
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
TOKEN = TOKEN.strip()
if ":" not in TOKEN:
    raise ValueError("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω! –¢–æ–∫–µ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –¥–≤–æ–∫—Ä–∞–ø–∫—É (:).")
bot = TeleBot(TOKEN)

# =======================
# –§–ê–ô–õ –î–ê–ù–ò–•
# =======================
DATA_FILE = "data.json"

def load_data():
    if not os.path.exists(DATA_FILE):
        return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": [], "archive": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}

def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üì¶ –ê—Ä—Ö—ñ–≤")
    kb.add("üì• –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
    kb.add("–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç", "–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å", "–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def archive_week_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weeks = sorted({(p["year"], p["week"]) for p in data["archive"]}, reverse=True)
    for year, week in weeks:
        kb.add(f"–¢–∏–∂–¥–µ–Ω—å {week} ({year})")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –°–¢–ê–†–¢
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone_start(message):
    chat_id = message.chat.id
    push_state(chat_id, "add_store")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())

# =======================
# –ü–ï–†–ï–ù–ï–°–ï–ù–ù–Ø –¢–ò–ñ–ù–Ø –í –ê–†–•–Ü–í
# =======================
@bot.message_handler(func=lambda m: m.text == "üì• –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
def archive_week(message):
    chat_id = message.chat.id
    now = datetime.now()
    start_week = now - timedelta(days=7)
    to_archive = []

    for p in data["phones"]:
        phone_date = datetime.strptime(p["date"], "%d.%m.%Y %H:%M")
        if phone_date >= start_week:
            week_num = phone_date.isocalendar()[1]
            year = phone_date.year
            archived_phone = p.copy()
            archived_phone["week"] = week_num
            archived_phone["year"] = year
            to_archive.append(archived_phone)

    if not to_archive:
        bot.send_message(chat_id, "üì≠ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤—É.", reply_markup=main_menu())
        return

    data["archive"].extend(to_archive)
    data["phones"] = [p for p in data["phones"] if datetime.strptime(p["date"], "%d.%m.%Y %H:%M") < start_week]
    save_data(data)
    bot.send_message(chat_id, f"üì¶ {len(to_archive)} —Ä–µ–º–æ–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤!\nüÜï –ù–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å –ø–æ—á–∞–≤—Å—è.", reply_markup=main_menu())

# =======================
# –ü–ï–†–ï–ì–õ–Ø–î –ê–†–•–Ü–í–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì¶ –ê—Ä—Ö—ñ–≤")
def choose_archive_week(message):
    chat_id = message.chat.id
    if not data["archive"]:
        bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
        return
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=archive_week_menu())
    push_state(chat_id, "archive_select_week")

@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_select_week")
def show_archive_week(message):
    chat_id = message.chat.id
    txt = message.text
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
    try:
        parts = txt.split()
        week_num = int(parts[1])
        year = int(parts[2].strip("()"))
    except:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=archive_week_menu())
        return

    phones = [p for p in data["archive"] if p.get("week") == week_num and p.get("year") == year]
    if not phones:
        bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ–º–∞—î.", reply_markup=archive_week_menu())
        return

    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i, p in enumerate(phones, 1):
        kb.add(f"{i}. {p['model']} ({p['store']})")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    push_state(chat_id, "archive_select_phone")
    user_state[chat_id]["tmp"]["archive_week"] = (week_num, year)
    bot.send_message(chat_id, f"üì¶ –ê—Ä—Ö—ñ–≤: —Ç–∏–∂–¥–µ–Ω—å {week_num} ({year})\n–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)

# =======================
# –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø / –í–ò–î–ê–õ–ï–ù–ù–Ø –ê–†–•–Ü–í–£
# =======================
@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_select_phone")
def archive_edit_phone(message):
    chat_id = message.chat.id
    txt = message.text
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        show_archive_week(message)
        return
    week_num, year = user_state[chat_id]["tmp"]["archive_week"]
    phones = [p for p in data["archive"] if p.get("week") == week_num and p.get("year") == year]
    try:
        idx = int(txt.split(".")[0]) - 1
        if not (0 <= idx < len(phones)):
            raise ValueError
    except:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=archive_week_menu())
        return
    user_state[chat_id]["tmp"]["edit_idx"] = idx
    push_state(chat_id, "archive_edit_action")
    bot.send_message(chat_id, "–û–±—Ä–∞—Ç–∏ –¥—ñ—é:", reply_markup=edit_action_menu())

@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_edit_action")
def archive_edit_action(message):
    chat_id = message.chat.id
    txt = message.text
    idx = user_state[chat_id]["tmp"]["edit_idx"]
    week_num, year = user_state[chat_id]["tmp"]["archive_week"]
    phones = [p for p in data["archive"] if p.get("week") == week_num and p.get("year") == year]
    phone = phones[idx]

    field_map = {"–ú–∞–≥–∞–∑–∏–Ω":"store","–ú–æ–¥–µ–ª—å":"model","–ü—Ä–æ–±–ª–µ–º–∞":"problem","–¶—ñ–Ω–∞":"price"}

    if txt == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏":
        push_state(chat_id, "archive_edit_field")
        bot.send_message(chat_id, "–©–æ —Ä–µ–¥–∞–≥—É—î–º–æ?", reply_markup=edit_field_menu())
        return
    elif txt == "üóë –í–∏–¥–∞–ª–∏—Ç–∏":
        push_state(chat_id, "archive_confirm_delete")
        bot.send_message(chat_id, f"–í–∏–¥–∞–ª–∏—Ç–∏ {phone['model']}?", reply_markup=confirm_delete_menu())
        return
    elif txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        show_archive_week(message)
        return

@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_edit_field")
def archive_edit_field(message):
    chat_id = message.chat.id
    field = message.text
    user_state[chat_id]["tmp"]["field"] = field
    push_state(chat_id, "archive_edit_enter")
    bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {field}:", reply_markup=back_button())

@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_edit_enter")
def archive_edit_enter(message):
    chat_id = message.chat.id
    value = message.text
    idx = user_state[chat_id]["tmp"]["edit_idx"]
    field = user_state[chat_id]["tmp"]["field"]
    week_num, year = user_state[chat_id]["tmp"]["archive_week"]
    phones = [p for p in data["archive"] if p.get("week") == week_num and p.get("year") == year]
    key = {"–ú–∞–≥–∞–∑–∏–Ω":"store","–ú–æ–¥–µ–ª—å":"model","–ü—Ä–æ–±–ª–µ–º–∞":"problem","–¶—ñ–Ω–∞":"price"}[field]

    if field == "–¶—ñ–Ω–∞":
        try:
            value = float(value)
        except:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.", reply_markup=back_button())
            return
    elif field == "–ú–∞–≥–∞–∑–∏–Ω":
        if value not in data["stores"]:
            data["stores"].append(value)

    phones[idx][key] = value
    # –æ–Ω–æ–≤–ª—é—î–º–æ –≤ –∞—Ä—Ö—ñ–≤—ñ
    for i, p in enumerate(data["archive"]):
        if p.get("week")==week_num and p.get("year")==year and p==phones[idx]:
            data["archive"][i] = phones[idx]
            break
    save_data(data)
    bot.send_message(chat_id, f"‚úÖ {field} –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
    clear_state(chat_id)

@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_confirm_delete")
def archive_confirm_delete(message):
    chat_id = message.chat.id
    txt = message.text
    idx = user_state[chat_id]["tmp"]["edit_idx"]
    week_num, year = user_state[chat_id]["tmp"]["archive_week"]
    phones = [p for p in data["archive"] if p.get("week") == week_num and p.get("year") == year]
    phone = phones[idx]

    if txt == "‚úÖ –¢–∞–∫":
        data["archive"].remove(phone)
        save_data(data)
        bot.send_message(chat_id, f"üóë –¢–µ–ª–µ—Ñ–æ–Ω {phone['model']} –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞—Ä—Ö—ñ–≤—É!", reply_markup=main_menu())
    else:
        bot.send_message(chat_id, "‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
    clear_state(chat_id)

# =======================
# –ó–í–Ü–¢–ò
# =======================
def generate_report(period="week"):
    now = datetime.now()
    start = now - timedelta(days=7 if period=="week" else 30)
    phones = [p for p in data["phones"] if datetime.strptime(p["date"], "%d.%m.%Y %H:%M") >= start]
    total = sum(p["price"] for p in phones)
    count = len(phones)
    stores_summary = {}
    for p in phones:
        stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
    report = f"üìä –ó–≤—ñ—Ç –∑–∞ {period}:\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {count}\nüí∞ –°—É–º–∞: {total} –≥—Ä–Ω\n\n"
    report += "\n".join(f"‚Ä¢ {s}: {v} –≥—Ä–Ω" for s, v in stores_summary.items())
    return report

@bot.message_handler(func=lambda m: m.text in ["–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç", "–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç"])
def report_handler(message):
    chat_id = message.chat.id
    period = "week" if message.text=="–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç" else "month"
    bot.send_message(chat_id, generate_report(period), parse_mode="HTML", reply_markup=main_menu())

# =======================
# –ì–ï–ù–ï–†–ò–ß–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –¢–ï–õ–ï–§–û–ù–Ü–í
# =======================
# –í—Å—ñ –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
# –¢–æ–π —Å–∞–º–∏–π –∫–æ–¥ —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –º–æ—î–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
# (—â–æ–± –Ω–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ —Ç—É—Ç —á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è, –π–æ–≥–æ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±–µ–∑ –∑–º—ñ–Ω)

# =======================
# –°–¢–ê–†–¢ –ë–û–¢–ê
# =======================
bot.infinity_polling()