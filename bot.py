from telebot import TeleBot, types
from flask import Flask, request
import json
import os

# =======================
# –í–∞—à —Ç–æ–∫–µ–Ω Telegram
# =======================
TOKEN = "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
bot = TeleBot(TOKEN)
app = Flask(__name__)

DATA_FILE = "data.json"

# =======================
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏
# =======================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# =======================
# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# =======================
user_state = {}

def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –ú–µ–Ω—é
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –°—Ç–∞—Ä—Ç
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
# =======================
@bot.message_handler(func=lambda m: True)
def handle_msg(message):
    chat_id = message.chat.id
    txt = message.text
    state = current_state(chat_id)

    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    if txt == "üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω":
        push_state(chat_id, "add_store")
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for s in data["stores"]:
            kb.add(s)
        kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=kb)
        return

    if state == "add_store":
        if txt not in data["stores"]:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω", reply_markup=back_button())
            return
        user_state[chat_id]["tmp"]["store"] = txt
        push_state(chat_id, "add_model")
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
        return

    if state == "add_model":
        user_state[chat_id]["tmp"]["model"] = txt
        push_state(chat_id, "add_problem")
        bot.send_message(chat_id, "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=back_button())
        return

    if state == "add_problem":
        user_state[chat_id]["tmp"]["problem"] = txt
        push_state(chat_id, "add_price")
        bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ä–µ–º–æ–Ω—Ç—É:", reply_markup=back_button())
        return

    if state == "add_price":
        try:
            price = float(txt)
        except:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.", reply_markup=back_button())
            return
        user_state[chat_id]["tmp"]["price"] = price
        phone = {
            "store": user_state[chat_id]["tmp"]["store"],
            "model": user_state[chat_id]["tmp"]["model"],
            "problem": user_state[chat_id]["tmp"]["problem"],
            "price": price
        }
        data["phones"].append(phone)
        save_data(data)
        bot.send_message(chat_id, f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {phone['model']} –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
        clear_state(chat_id)
        return

    # üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏
    if txt == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
            return
        msg = ""
        for i, p in enumerate(data["phones"], 1):
            msg += f"{i}. [{p['store']}] {p['model']} - {p['problem']} ({p['price']}‚Ç¥)\n"
        bot.send_message(chat_id, msg, reply_markup=main_menu())
        return

    # ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏
    if txt == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
            return
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for i, p in enumerate(data["phones"], 1):
            kb.add(f"{i}. {p['model']}")
        kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        push_state(chat_id, "edit_select")
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è/–≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)
        return

    if state == "edit_select":
        try:
            index = int(txt.split(".")[0]) - 1
            phone = data["phones"][index]
            user_state[chat_id]["tmp"]["edit_index"] = index
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å")
            kb.add("–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
            kb.add("üóë –í–∏–¥–∞–ª–∏—Ç–∏", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            push_state(chat_id, "edit_field")
            bot.send_message(chat_id, f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è {phone['model']}:", reply_markup=kb)
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=back_button())
        return

    if state == "edit_field":
        index = user_state[chat_id]["tmp"]["edit_index"]
        phone = data["phones"][index]
        field_map = {
            "–ú–∞–≥–∞–∑–∏–Ω": "store",
            "–ú–æ–¥–µ–ª—å": "model",
            "–ü—Ä–æ–±–ª–µ–º–∞": "problem",
            "–¶—ñ–Ω–∞": "price"
        }
        if txt in field_map:
            user_state[chat_id]["tmp"]["edit_field"] = field_map[txt]
            push_state(chat_id, "edit_input")
            bot.send_message(chat_id, f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {txt}:", reply_markup=back_button())
            return
        elif txt == "üóë –í–∏–¥–∞–ª–∏—Ç–∏":
            data["phones"].pop(index)
            save_data(data)
            bot.send_message(chat_id, "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=back_button())
        return

    if state == "edit_input":
        index = user_state[chat_id]["tmp"]["edit_index"]
        field = user_state[chat_id]["tmp"]["edit_field"]
        if field == "price":
            try:
                value = float(txt)
            except:
                bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.", reply_markup=back_button())
                return
        else:
            value = txt
        data["phones"][index][field] = value
        save_data(data)
        bot.send_message(chat_id, f"‚úÖ {field} –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
        clear_state(chat_id)
        return

    # üìä –ü—ñ–¥—Å—É–º–æ–∫
    if txt == "üìä –ü—ñ–¥—Å—É–º–æ–∫":
        total = sum(p["price"] for p in data["phones"])
        count = len(data["phones"])
        bot.send_message(chat_id, f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {count}\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total}‚Ç¥", reply_markup=main_menu())
        return

    # üè™ –ú–∞–≥–∞–∑–∏–Ω–∏
    if txt == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏":
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for s in data["stores"]:
            kb.add(s)
        kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω")
        kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
        push_state(chat_id, "stores_menu")
        bot.send_message(chat_id, "–ú–∞–≥–∞–∑–∏–Ω–∏:", reply_markup=kb)
        return

    if state == "stores_menu":
        if txt == "‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –º–∞–≥–∞–∑–∏–Ω":
            push_state(chat_id, "add_new_store")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:", reply_markup=back_button())
            return
        elif txt in data["stores"]:
            bot.send_message(chat_id, f"–ú–∞–≥–∞–∑–∏–Ω: {txt}", reply_markup=main_menu())
            return
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è", reply_markup=back_button())
            return

    if state == "add_new_store":
        data["stores"].append(txt)
        save_data(data)
        bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω {txt} –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
        clear_state(chat_id)
        return

# =======================
# Webhook
# =======================
@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    json_str = request.get_data().decode("utf-8")
    update = types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return ""