import os
import json
import threading
import re
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"  # <-- —Ç–≤—ñ–π —Ç–æ–∫–µ–Ω
DATA_FILE = "data.json"

bot = TeleBot(TOKEN)
data_lock = threading.Lock()

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø / –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–• (–∑ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è–º)
# =======================
def load_data():
    with data_lock:
        if not os.path.exists(DATA_FILE):
            return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": [], "archive": []}
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)

def save_data(d):
    with data_lock:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}  # chat_id -> {"stack": [], "tmp": {}}
def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()
    # clear tmp if stack empty
    if not user_state[chat_id]["stack"]:
        user_state[chat_id]["tmp"] = {}

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –£–¢–ò–õ–Ü–¢–ò –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø
# =======================
def fmt_price(p):
    # –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —è–∫ —Ü—ñ–ª–µ, —è–∫—â–æ –≤–æ–Ω–æ —Ü—ñ–ª–µ
    try:
        if int(p) == p:
            return f"{int(p)}"
    except Exception:
        pass
    return f"{p}"

def phone_display(p):
    return (f"{p['model']} ({p['store']})\n"
            f"üîß {p['problem']}\n"
            f"üí∞ {fmt_price(p['price'])} –≥—Ä–Ω\n"
            f"üïí {p['date']}")

def phone_short(p):
    return f"{p['model']} ({p['store']})"

# =======================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üóÇ –ê—Ä—Ö—ñ–≤")
    kb.add("üìù –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu(include_add=True):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    if include_add:
        kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å")
    kb.add("–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def archive_week_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weeks = [w["week"] for w in data.get("archive", [])]
    for w in weeks:
        kb.add(w)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def archive_view_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîΩ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏", "üîº –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å")
    kb.add("üì§ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑ –∞—Ä—Ö—ñ–≤—É")
    kb.add("üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ (–¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ —ñ–Ω–¥–µ–∫—Å—É)
def phones_list_keyboard(phones):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i, p in enumerate(phones, 1):
        kb.add(f"{i}. {phone_short(p)}")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –°–¢–ê–†–¢
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£ (–ø–æ—á–∞—Ç–æ–∫)
# =======================
@bot.message_handler(func=lambda m: m.text == "üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    push_state(chat_id, "add_store")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())

# =======================
# –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø / –í–ò–î–ê–õ–ï–ù–ù–Ø (–ø–æ—á–∞—Ç–æ–∫)
# =======================
@bot.message_handler(func=lambda m: m.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏")
def edit_phone_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    if not data["phones"]:
        bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
        return
    push_state(chat_id, "edit_select")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=phones_list_keyboard(data["phones"]))

# =======================
# –ì–ï–ù–ï–†–ò–ß–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö
# =======================
@bot.message_handler(func=lambda m: True)
def generic_handler(message):
    chat_id = message.chat.id
    txt = message.text.strip() if message.text else ""
    state = current_state(chat_id)

    # -----------------------
    # –ö–ù–û–ü–ö–ò –ì–û–õ–û–í–ù–û–ì–û –ú–ï–ù–Æ
    # -----------------------
    if txt == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            return
        text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤:</b>\n\n"
        for i, p in enumerate(data["phones"], 1):
            text += (f"{i}. {phone_display(p)}\n\n")
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        return

    elif txt == "üìä –ü—ñ–¥—Å—É–º–æ–∫":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            return
        total = sum(float(p["price"]) for p in data["phones"])
        count = len(data["phones"])
        stores_summary = {}
        for p in data["phones"]:
            stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + float(p["price"])
        store_text = "\n".join(f"‚Ä¢ {s}: {fmt_price(v)} –≥—Ä–Ω" for s, v in stores_summary.items())
        bot.send_message(chat_id,
                         f"üìä –ü—ñ–¥—Å—É–º–æ–∫:\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {count}\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {fmt_price(total)} –≥—Ä–Ω\n\n<b>–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:</b>\n{store_text}",
                         parse_mode="HTML", reply_markup=main_menu())
        return

    elif txt == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏":
        text = "üè™ <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤:</b>\n" + "\n".join(f"‚Ä¢ {s}" for s in data["stores"])
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        return

    elif txt == "üóÇ –ê—Ä—Ö—ñ–≤":
        if not data.get("archive"):
            bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
            return
        clear_state(chat_id)
        push_state(chat_id, "archive_select_week")
        bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å:", reply_markup=archive_week_menu())
        return

    elif txt == "üìù –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î –¥–ª—è –∞—Ä—Ö—ñ–≤—É.", reply_markup=main_menu())
            return
        week_str = datetime.now().strftime("%d.%m.%Y") + " - " + (datetime.now() + timedelta(days=6)).strftime("%d.%m.%Y")
        data.setdefault("archive", []).append({"week": week_str, "phones": data["phones"].copy()})
        data["phones"].clear()
        save_data(data)
        bot.send_message(chat_id, f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω–∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å {week_str}", reply_markup=main_menu())
        return

    # -----------------------
    # –ù–ê–ó–ê–î (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
    # -----------------------
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        new_state = current_state(chat_id)
        # —è–∫—â–æ –Ω–µ–º–∞—î –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Å—Ç–∞–Ω—É ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        if not new_state:
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        else:
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –º–µ–Ω—é.", reply_markup=main_menu())
            # (–¥–æ–¥–∞—Ç–∫–æ–≤–æ—ó –ª–æ–≥—ñ–∫–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ ‚Äî –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º–æ–∂–µ –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ)
        return

    # =======================
    # –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£ (–ü–û–°–¢–£–ü–û–í–û)
    # =======================
    if state == "add_store":
        if txt == "‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω":
            push_state(chat_id, "add_new_store")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:", reply_markup=back_button())
            return
        elif txt in data["stores"]:
            ensure_state(chat_id)
            user_state[chat_id]["tmp"]["store"] = txt
            push_state(chat_id, "add_model")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
            return
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π.", reply_markup=stores_menu())
            return

    if state == "add_new_store":
        store_name = txt.strip()
        if store_name and store_name not in data["stores"]:
            data["stores"].append(store_name)
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´{store_name}¬ª –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        else:
            bot.send_message(chat_id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–∞–∑–≤–∞ –ø—É—Å—Ç–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.", reply_markup=back_button())
        pop_state(chat_id)
        return

    if state == "add_model":
        ensure_state(chat_id)
        user_state[chat_id]["tmp"]["model"] = txt
        push_state(chat_id, "add_problem")
        bot.send_message(chat_id, "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
        return

    if state == "add_problem":
        ensure_state(chat_id)
        user_state[chat_id]["tmp"]["problem"] = txt
        push_state(chat_id, "add_price")
        bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —Ä–µ–º–æ–Ω—Ç—É (—á–∏—Å–ª–æ–º):", reply_markup=back_button())
        return

    if state == "add_price":
        try:
            price = float(txt.replace(",", "."))
            tmp = user_state[chat_id]["tmp"]
            phone = {
                "store": tmp["store"],
                "model": tmp["model"],
                "problem": tmp["problem"],
                "price": price,
                "date": datetime.now().strftime("%d.%m.%Y %H:%M")
            }
            data["phones"].append(phone)
            save_data(data)
            bot.send_message(chat_id, "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        except Exception:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 450.50).", reply_markup=back_button())
        return

    # =======================
    # –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø / –í–ò–î–ê–õ–ï–ù–ù–Ø (–í–ò–ë–Ü–† –¢–ï–õ–ï–§–û–ù–£)
    # =======================
    if state == "edit_select":
        # –æ—á—ñ–∫—É—î–º–æ –≤–∏–±—ñ—Ä —Ç–∏–ø—É "1. Model (store)"
        m = re.match(r'^\s*(\d+)', txt)
        if m:
            idx = int(m.group(1)) - 1
            if 0 <= idx < len(data["phones"]):
                ensure_state(chat_id)
                user_state[chat_id]["tmp"]["sel_index"] = idx
                push_state(chat_id, "edit_action")
                p = data["phones"][idx]
                bot.send_message(chat_id, f"–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è:\n{phone_display(p)}", reply_markup=edit_action_menu())
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å. –û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=phones_list_keyboard(data["phones"]))
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ä—è–¥–æ–∫ –∑—ñ —Å–ø–∏—Å–∫—É).", reply_markup=phones_list_keyboard(data["phones"]))
        return

    # =======================
    # –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø / –í–ò–î–ê–õ–ï–ù–ù–Ø (–î–Ü–á)
    # =======================
    if state == "edit_action":
        idx = user_state[chat_id]["tmp"].get("sel_index")
        if idx is None or idx >= len(data["phones"]):
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return

        if txt == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏":
            push_state(chat_id, "edit_field")
            bot.send_message(chat_id, f"–û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:\n{phone_display(data['phones'][idx])}", reply_markup=edit_field_menu())
            return

        if txt == "üóë –í–∏–¥–∞–ª–∏—Ç–∏":
            push_state(chat_id, "confirm_delete")
            bot.send_message(chat_id, f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–µ–ª–µ—Ñ–æ–Ω?\n{phone_display(data['phones'][idx])}", reply_markup=confirm_delete_menu())
            return

        if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            pop_state(chat_id)
            pop_state(chat_id)
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
            return

        bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=edit_action_menu())
        return

    # =======================
    # –ü–Ü–î–¢–í–ï–†–î–ñ–ï–ù–ù–Ø –í–ò–î–ê–õ–ï–ù–ù–Ø –ó –ì–û–õ–û–í–ù–û–ì–û –°–ü–ò–°–ö–£
    # =======================
    if state == "confirm_delete":
        idx = user_state[chat_id]["tmp"].get("sel_index")
        if txt == "‚úÖ –¢–∞–∫":
            if idx is not None and 0 <= idx < len(data["phones"]):
                removed = data["phones"].pop(idx)
                save_data(data)
                bot.send_message(chat_id, f"üóë –¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ:\n{phone_short(removed)}", reply_markup=main_menu())
            else:
                bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        elif txt == "‚ùå –ù—ñ":
            pop_state(chat_id)
            pop_state(chat_id)
            bot.send_message(chat_id, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
            return
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å ‚úÖ –¢–∞–∫ –∞–±–æ ‚ùå –ù—ñ.", reply_markup=confirm_delete_menu())
            return

    # =======================
    # –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ü–û–õ–Ü–í
    # =======================
    if state == "edit_field":
        idx = user_state[chat_id]["tmp"].get("sel_index")
        if txt == "–ú–∞–≥–∞–∑–∏–Ω":
            push_state(chat_id, "edit_field_store")
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())
            return
        if txt == "–ú–æ–¥–µ–ª—å":
            push_state(chat_id, "edit_field_model")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –º–æ–¥–µ–ª—å:", reply_markup=back_button())
            return
        if txt == "–ü—Ä–æ–±–ª–µ–º–∞":
            push_state(chat_id, "edit_field_problem")
            bot.send_message(chat_id, "–û–ø–∏—à—ñ—Ç—å –Ω–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=back_button())
            return
        if txt == "–¶—ñ–Ω–∞":
            push_state(chat_id, "edit_field_price")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É (—á–∏—Å–ª–æ–º):", reply_markup=back_button())
            return
        if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            pop_state(chat_id)
            pop_state(chat_id)
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
            return
        bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –ø–æ–ª–µ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=edit_field_menu())
        return

    # —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É (–≤–∏–±—ñ—Ä –∞–±–æ –¥–æ–¥–∞—Ç–∏)
    if state == "edit_field_store":
        idx = user_state[chat_id]["tmp"].get("sel_index")
        if txt == "‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω":
            push_state(chat_id, "add_new_store_edit")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:", reply_markup=back_button())
            return
        elif txt in data["stores"]:
            if idx is not None and 0 <= idx < len(data["phones"]):
                data["phones"][idx]["store"] = txt
                save_data(data)
                bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω—É:\n{phone_short(data['phones'][idx])}", reply_markup=main_menu())
            else:
                bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π.", reply_markup=stores_menu())
            return

    # –¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É –ø—ñ–¥ —á–∞—Å —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
    if state == "add_new_store_edit":
        store_name = txt.strip()
        if store_name and store_name not in data["stores"]:
            data["stores"].append(store_name)
            # –æ–¥—Ä–∞–∑—É –æ–Ω–æ–≤–ª—é—î–º–æ –º–∞–≥–∞–∑–∏–Ω —É –≤–∏–±—Ä–∞–Ω–æ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—ñ
            idx = user_state[chat_id]["tmp"].get("sel_index")
            if idx is not None and 0 <= idx < len(data["phones"]):
                data["phones"][idx]["store"] = store_name
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´{store_name}¬ª –¥–æ–¥–∞–Ω–æ —ñ –∑–∞—Å—Ç–æ—Å–æ–≤–∞–Ω–æ –¥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É!", reply_markup=main_menu())
            clear_state(chat_id)
        else:
            bot.send_message(chat_id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–∞–∑–≤–∞ –ø—É—Å—Ç–∞. –í–≤–µ–¥—ñ—Ç—å —ñ–Ω—à—É –Ω–∞–∑–≤—É.", reply_markup=back_button())
        return

    # —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
    if state == "edit_field_model":
        idx = user_state[chat_id]["tmp"].get("sel_index")
        if idx is not None and 0 <= idx < len(data["phones"]):
            data["phones"][idx]["model"] = txt
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ú–æ–¥–µ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ:\n{phone_short(data['phones'][idx])}", reply_markup=main_menu())
        else:
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.", reply_markup=main_menu())
        clear_state(chat_id)
        return

    # —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏
    if state == "edit_field_problem":
        idx = user_state[chat_id]["tmp"].get("sel_index")
        if idx is not None and 0 <= idx < len(data["phones"]):
            data["phones"][idx]["problem"] = txt
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ü—Ä–æ–±–ª–µ–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ:\n{phone_display(data['phones'][idx])}", reply_markup=main_menu())
        else:
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.", reply_markup=main_menu())
        clear_state(chat_id)
        return

    # —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ü—ñ–Ω–∏
    if state == "edit_field_price":
        idx = user_state[chat_id]["tmp"].get("sel_index")
        try:
            price = float(txt.replace(",", "."))
            if idx is not None and 0 <= idx < len(data["phones"]):
                data["phones"][idx]["price"] = price
                save_data(data)
                bot.send_message(chat_id, f"‚úÖ –¶—ñ–Ω—É –æ–Ω–æ–≤–ª–µ–Ω–æ:\n{phone_display(data['phones'][idx])}", reply_markup=main_menu())
            else:
                bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ.", reply_markup=main_menu())
        except Exception:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 450 –∞–±–æ 450.50).", reply_markup=back_button())
        clear_state(chat_id)
        return

    # =======================
    # –†–û–ë–û–¢–ê –ó –ê–†–•–Ü–í–û–ú
    # =======================
    if state == "archive_select_week":
        # –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±—Ä–∞–≤ –Ω–∞–∑–≤—É —Ç–∏–∂–Ω—è
        weeks = [w["week"] for w in data.get("archive", [])]
        if txt in weeks:
            idx = weeks.index(txt)
            ensure_state(chat_id)
            user_state[chat_id]["tmp"]["archive_week_index"] = idx
            push_state(chat_id, "archive_view")
            bot.send_message(chat_id, f"–¢–∏–∂–¥–µ–Ω—å: {txt}\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=archive_view_menu())
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=archive_week_menu())
        return

    if state == "archive_view":
        a_idx = user_state[chat_id]["tmp"].get("archive_week_index")
        if a_idx is None or a_idx >= len(data.get("archive", [])):
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∏–∂–¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        week = data["archive"][a_idx]
        if txt == "üîΩ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏":
            phones = week.get("phones", [])
            if not phones:
                bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≤ —Ü—å–æ–º—É —Ç–∏–∂–Ω—ñ –Ω–µ–º–∞—î.", reply_markup=archive_view_menu())
                return
            text = f"üìã <b>–¢–µ–ª–µ—Ñ–æ–Ω–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å {week['week']}:</b>\n\n"
            for i, p in enumerate(phones, 1):
                text += (f"{i}. {phone_display(p)}\n\n")
            bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=archive_view_menu())
            return

        if txt == "üîº –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å":
            phones = week.get("phones", [])
            data["phones"].extend(phones)
            # –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –∑ –∞—Ä—Ö—ñ–≤—É
            data["archive"].pop(a_idx)
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –¢–∏–∂–¥–µ–Ω—å {week['week']} –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é –≤ –ø–æ—Ç–æ—á–Ω–∏–π —Å–ø–∏—Å–æ–∫.", reply_markup=main_menu())
            clear_state(chat_id)
            return

        if txt == "üì§ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω":
            phones = week.get("phones", [])
            if not phones:
                bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î.", reply_markup=archive_view_menu())
                return
            push_state(chat_id, "archive_restore_select")
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è:", reply_markup=phones_list_keyboard(phones))
            return

        if txt == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑ –∞—Ä—Ö—ñ–≤—É":
            phones = week.get("phones", [])
            if not phones:
                bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î.", reply_markup=archive_view_menu())
                return
            push_state(chat_id, "archive_delete_phone_select")
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω, —è–∫–∏–π –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –∞—Ä—Ö—ñ–≤—É:", reply_markup=phones_list_keyboard(phones))
            return

        if txt == "üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å":
            push_state(chat_id, "archive_delete_confirm")
            bot.send_message(chat_id, f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å {week['week']} –∑ –∞—Ä—Ö—ñ–≤—É? –¶–µ –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω—å–æ.", reply_markup=confirm_delete_menu())
            return

        if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            pop_state(chat_id)
            pop_state(chat_id)
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
            return

        bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.", reply_markup=archive_view_menu())
        return

    # –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ –∞—Ä—Ö—ñ–≤—É
    if state == "archive_restore_select":
        a_idx = user_state[chat_id]["tmp"].get("archive_week_index")
        if a_idx is None or a_idx >= len(data.get("archive", [])):
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∏–∂–¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        week = data["archive"][a_idx]
        phones = week.get("phones", [])
        m = re.match(r'^\s*(\d+)', txt)
        if m:
            p_idx = int(m.group(1)) - 1
            if 0 <= p_idx < len(phones):
                phone = phones.pop(p_idx)
                data["phones"].append(phone)
                # —è–∫—â–æ —Ç–∏–∂–¥–µ–Ω—å –∑–∞–ª–∏—à–∏–≤—Å—è –ø–æ—Ä–æ–∂–Ω—ñ–º - –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
                if not phones:
                    data["archive"].pop(a_idx)
                save_data(data)
                bot.send_message(chat_id, f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ:\n{phone_short(phone)}", reply_markup=main_menu())
                clear_state(chat_id)
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å. –û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=phones_list_keyboard(phones))
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ä—è–¥–æ–∫).", reply_markup=phones_list_keyboard(phones))
        return

    # –≤–∏–¥–∞–ª–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –∑ –∞—Ä—Ö—ñ–≤—É
    if state == "archive_delete_phone_select":
        a_idx = user_state[chat_id]["tmp"].get("archive_week_index")
        if a_idx is None or a_idx >= len(data.get("archive", [])):
            bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∏–∂–¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        week = data["archive"][a_idx]
        phones = week.get("phones", [])
        m = re.match(r'^\s*(\d+)', txt)
        if m:
            p_idx = int(m.group(1)) - 1
            if 0 <= p_idx < len(phones):
                removed = phones.pop(p_idx)
                # —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å - –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ
                if not phones:
                    data["archive"].pop(a_idx)
                save_data(data)
                bot.send_message(chat_id, f"üóë –¢–µ–ª–µ—Ñ–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞—Ä—Ö—ñ–≤—É:\n{phone_short(removed)}", reply_markup=main_menu())
                clear_state(chat_id)
            else:
                bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —ñ–Ω–¥–µ–∫—Å. –û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=phones_list_keyboard(phones))
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É (–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ä—è–¥–æ–∫).", reply_markup=phones_list_keyboard(phones))
        return

    # –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–∂–Ω—è
    if state == "archive_delete_confirm":
        a_idx = user_state[chat_id]["tmp"].get("archive_week_index")
        if txt == "‚úÖ –¢–∞–∫":
            if a_idx is not None and 0 <= a_idx < len(data.get("archive", [])):
                removed = data["archive"].pop(a_idx)
                save_data(data)
                bot.send_message(chat_id, f"üóë –¢–∏–∂–¥–µ–Ω—å –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –∞—Ä—Ö—ñ–≤—É: {removed['week']}", reply_markup=main_menu())
            else:
                bot.send_message(chat_id, "‚ùå –ü–æ–º–∏–ª–∫–∞: —Ç–∏–∂–¥–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=main_menu())
            clear_state(chat_id)
            return
        elif txt == "‚ùå –ù—ñ":
            pop_state(chat_id)
            pop_state(chat_id)
            bot.send_message(chat_id, "–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
            return
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å ‚úÖ –¢–∞–∫ –∞–±–æ ‚ùå –ù—ñ.", reply_markup=confirm_delete_menu())
        return

    # —è–∫—â–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ
    bot.send_message(chat_id, "–ù–µ –≤–ø—ñ–∑–Ω–∞—é –∫–æ–º–∞–Ω–¥—É –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.", reply_markup=main_menu())

# =======================
# –°–¢–ê–†–¢ –ë–û–¢–ê
# =======================
if __name__ == "__main__":
    print("Bot started...")
    bot.infinity_polling()