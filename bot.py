import os
import json
from datetime import datetime
from telebot import TeleBot, types

# =======================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
bot = TeleBot(TOKEN)
DATA_FILE = "data.json"

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø / –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
# =======================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}  # chat_id -> {"stack": [], "tmp": {}}

def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –ú–ê–ü–ê –ü–û–õ–Ü–í –î–õ–Ø –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø
# =======================
FIELD_MAP = {
    "–ú–∞–≥–∞–∑–∏–Ω": "store",
    "–ú–æ–¥–µ–ª—å": "model",
    "–ü—Ä–æ–±–ª–µ–º–∞": "problem",
    "–¶—ñ–Ω–∞": "price"
}

# =======================
# –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(*FIELD_MAP.keys())
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

# =======================
# –°–¢–ê–†–¢
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –û–ë–†–û–ë–ö–ê –ú–ê–ì–ê–ó–ò–ù–Ü–í
# =======================
@bot.message_handler(func=lambda m: m.text == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏")
def handle_stores(message):
    chat_id = message.chat.id
    text = "üè™ <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤:</b>\n" + "\n".join(f"‚Ä¢ {s}" for s in data["stores"])
    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())

# =======================
# –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone_start(message):
    chat_id = message.chat.id
    push_state(chat_id, "add_store")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())

# =======================
# –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –í–Ü–î–û–ë–†–ê–ñ–ï–ù–ù–Ø –í–ò–ë–û–†–£ –¢–ï–õ–ï–§–û–ù–£ –î–õ–Ø –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø
# =======================
def show_edit_selection(chat_id):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i, p in enumerate(data["phones"], 1):
        kb.add(f"{i}. {p['model']} ({p['store']})")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=kb)

# =======================
# –ì–ï–ù–ï–†–ò–ß–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö
# =======================
@bot.message_handler(func=lambda m: True)
def generic_handler(message):
    chat_id = message.chat.id
    txt = message.text
    state = current_state(chat_id)

    print(f"[LOG] –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {chat_id}: {txt}, —Å—Ç–∞–Ω: {state}")

    # -----------------------
    # –ù–∞–∑–∞–¥
    # -----------------------
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        state = current_state(chat_id)
        if not state:
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        elif state == "add_store":
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())
        elif state.startswith("edit"):
            show_edit_selection(chat_id)
        return

    # -----------------------
    # –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    # -----------------------
    if txt == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            return
        text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤:</b>\n\n"
        for i, p in enumerate(data["phones"], 1):
            text += (f"{i}. {p['model']} ({p['store']})\n"
                     f"üîß {p['problem']}\n"
                     f"üí∞ {p['price']} –≥—Ä–Ω\n"
                     f"üïí {p['date']}\n\n")
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        return

    if txt == "üìä –ü—ñ–¥—Å—É–º–æ–∫":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            return

        text = "üìä <b>–ü—ñ–¥—Å—É–º–æ–∫ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:</b>\n\n"
        store_summary = {}
        total_count = 0
        total_sum = 0

        for p in data["phones"]:
            store = p["store"]
            price = p["price"]
            if store not in store_summary:
                store_summary[store] = {"count": 0, "sum": 0}
            store_summary[store]["count"] += 1
            store_summary[store]["sum"] += price
            total_count += 1
            total_sum += price

        for store, info in store_summary.items():
            text += f"üè™ {store}:\nüî¢ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {info['count']}\nüí∞ –°—É–º–∞: {info['sum']} –≥—Ä–Ω\n\n"

        text += f"üíº <b>–ó–∞–≥–∞–ª–æ–º:</b>\nüî¢ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {total_count}\nüí∞ –°—É–º–∞: {total_sum} –≥—Ä–Ω"
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        return

    if txt == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            return
        push_state(chat_id, "edit_select")
        show_edit_selection(chat_id)
        return

    # =======================
    # –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£
    # =======================
    if state == "add_store":
        if txt == "‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω":
            push_state(chat_id, "add_new_store")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:", reply_markup=back_button())
        elif txt in data["stores"]:
            user_state[chat_id]["tmp"]["store"] = txt
            push_state(chat_id, "add_model")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π.", reply_markup=stores_menu())
        return

    if state == "add_new_store":
        store_name = txt.strip()
        if store_name and store_name not in data["stores"]:
            data["stores"].append(store_name)
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´{store_name}¬ª –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        else:
            bot.send_message(chat_id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–∞–∑–≤–∞ –ø—É—Å—Ç–∞.", reply_markup=back_button())
        pop_state(chat_id)
        return

    if state == "add_model":
        user_state[chat_id]["tmp"]["model"] = txt
        push_state(chat_id, "add_problem")
        bot.send_message(chat_id, "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
        return

    if state == "add_problem":
        user_state[chat_id]["tmp"]["problem"] = txt
        push_state(chat_id, "add_price")
        bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —Ä–µ–º–æ–Ω—Ç—É:", reply_markup=back_button())
        return

    if state == "add_price":
        try:
            price = float(txt)
            user_state[chat_id]["tmp"]["price"] = price
            phone = {
                "store": user_state[chat_id]["tmp"]["store"],
                "model": user_state[chat_id]["tmp"]["model"],
                "problem": user_state[chat_id]["tmp"]["problem"],
                "price": price,
                "date": datetime.now().strftime("%d.%m.%Y %H:%M")
            }
            data["phones"].append(phone)
            save_data(data)
            bot.send_message(chat_id, "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.", reply_markup=back_button())
        return

# =======================
# –ó–ê–ü–£–°–ö –ë–û–¢–ê
# =======================
bot.infinity_polling()