import os
import json
import threading
import re
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
DATA_FILE = "data.json"

bot = TeleBot(TOKEN)
data_lock = threading.Lock()

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø / –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
# =======================
def load_data():
    with data_lock:
        if not os.path.exists(DATA_FILE):
            return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": [], "archive": []}
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)

def save_data(d):
    with data_lock:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)

data = load_data()

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}
def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()
    if not user_state[chat_id]["stack"]:
        user_state[chat_id]["tmp"] = {}

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –£–¢–ò–õ–Ü–¢–ò
# =======================
def fmt_price(p):
    try:
        if int(p) == p:
            return f"{int(p)}"
    except Exception:
        pass
    return f"{p}"

def phone_display(p):
    return (f"{p['model']} ({p['store']})\n"
            f"üîß {p['problem']}\n"
            f"üí∞ {fmt_price(p['price'])} –≥—Ä–Ω\n"
            f"üïí {p['date']}")

def phone_short(p):
    return f"{p['model']} ({p['store']})"

# =======================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üóÇ –ê—Ä—Ö—ñ–≤")
    kb.add("üìù –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
    kb.add("üìë –ó–≤—ñ—Ç –ø–æ –∞—Ä—Ö—ñ–≤—É / –º—ñ—Å—è—Ü—é")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu(include_add=True):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    if include_add:
        kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å")
    kb.add("–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def archive_week_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weeks = [w["week"] for w in data.get("archive", [])]
    for w in weeks:
        kb.add(w)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def archive_view_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîΩ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏", "üîº –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å")
    kb.add("üì§ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑ –∞—Ä—Ö—ñ–≤—É")
    kb.add("üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def phones_list_keyboard(phones):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i, p in enumerate(phones, 1):
        kb.add(f"{i}. {phone_short(p)}")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –°–¢–ê–†–¢
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –¢—É—Ç –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –≤–µ—Å—å —Ç–≤—ñ–π –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∫–æ–¥ –¥–æ –∞—Ä—Ö—ñ–≤—É
# ‚Ä¶ (650+ —Ä—è–¥–∫—ñ–≤ —Ç–≤–æ–≥–æ –∫–æ–¥—É) ‚Ä¶
# =======================

# =======================
# –ù–û–í–ï: –ó–í–Ü–¢ –ü–û –ê–†–•–Ü–í–£ / –ú–Ü–°–Ø–¶–Æ
# =======================
@bot.message_handler(func=lambda m: m.text == "üìë –ó–≤—ñ—Ç –ø–æ –∞—Ä—Ö—ñ–≤—É / –º—ñ—Å—è—Ü—é")
def report_menu(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    push_state(chat_id, "report_choose")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÖ –ó–≤—ñ—Ç –ø–æ —Ç–∏–∂–Ω—é", "üìÜ –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–≤—ñ—Ç—É:", reply_markup=kb)

@bot.message_handler(func=lambda m: True)
def generic_handler_reports(message):
    chat_id = message.chat.id
    txt = message.text.strip() if message.text else ""
    state = current_state(chat_id)

    # -----------------------
    # –ó–≤—ñ—Ç –ø–æ –∞—Ä—Ö—ñ–≤—É/–º—ñ—Å—è—Ü—é
    # -----------------------
    if state == "report_choose":
        if txt == "üìÖ –ó–≤—ñ—Ç –ø–æ —Ç–∏–∂–Ω—é":
            weeks = [w["week"] for w in data.get("archive", [])]
            if not weeks:
                bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
                clear_state(chat_id)
                return
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for w in weeks:
                kb.add(w)
            kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            push_state(chat_id, "report_week_select")
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –∑–≤—ñ—Ç—É:", reply_markup=kb)
            return

        elif txt == "üìÜ –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å":
            push_state(chat_id, "report_month_select")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ú–ú.–†–†–†–† (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 10.2025):", reply_markup=back_button())
            return

        elif txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
            pop_state(chat_id)
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
            return

    # -----------------------
    # –ó–≤—ñ—Ç –ø–æ —Ç–∏–∂–Ω—é
    # -----------------------
    if state == "report_week_select":
        weeks = [w["week"] for w in data.get("archive", [])]
        if txt in weeks:
            idx = weeks.index(txt)
            week = data["archive"][idx]
            phones = week.get("phones", [])
            total = sum(p["price"] for p in phones)
            text = f"üìã –ó–≤—ñ—Ç –∑–∞ —Ç–∏–∂–¥–µ–Ω—å {week['week']}:\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {fmt_price(total)} –≥—Ä–Ω\n\n–¢–µ–ª–µ—Ñ–æ–Ω–∏:\n"
            for p in phones:
                text += f"‚Ä¢ {phone_display(p)}\n"
            bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
            clear_state(chat_id)
            return
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=archive_week_menu())
            return

    # -----------------------
    # –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å
    # -----------------------
    if state == "report_month_select":
        try:
            month_str = txt
            month_dt = datetime.strptime(month_str, "%m.%Y")
            # –∑–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ –∑ archive —Ç–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö
            phones_all = []
            for w in data.get("archive", []):
                for p in w.get("phones", []):
                    dt = datetime.strptime(p["date"], "%d.%m.%Y %H:%M")
                    if dt.year == month_dt.year and dt.month == month_dt.month:
                        phones_all.append(p)
            for p in data.get("phones", []):
                dt = datetime.strptime(p["date"], "%d.%m.%Y %H:%M")
                if dt.year == month_dt.year and dt.month == month_dt.month:
                    phones_all.append(p)
            if not phones_all:
                bot.send_message(chat_id, "üì≠ –ó–∞ —Ü–µ–π –º—ñ—Å—è—Ü—å —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
                clear_state(chat_id)
                return
            total = sum(p["price"] for p in phones_all)
            text = f"üìã –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å {month_str}:\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {fmt_price(total)} –≥—Ä–Ω\n\n–¢–µ–ª–µ—Ñ–æ–Ω–∏:\n"
            for p in phones_all:
                text += f"‚Ä¢ {phone_display(p)}\n"
            bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
            clear_state(chat_id)
        except Exception:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å –ú–ú.–†–†–†–†", reply_markup=back_button())
        return

# =======================
# –°–¢–ê–†–¢ –ë–û–¢–ê
# =======================
if __name__ == "__main__":
    print("Bot started...")
    bot.infinity_polling()