from telebot import TeleBot, types
from datetime import datetime

TOKEN = "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
bot = TeleBot(TOKEN)

# –î–∞–Ω—ñ
phones = []
shops = {
    "It Center": "üíô",
    "–õ–µ—Å—è": "üíõ",
    "–û—Å–æ–±–∏—Å—Ç—ñ": "üíö"
}

# –ï–º–æ–¥–∑—ñ –¥–ª—è —Ç–∏–ø—É –ø—Ä–æ–±–ª–µ–º–∏
problem_emojis = {
    "–±–∞—Ç–∞—Ä–µ—è": "üîã",
    "–µ–∫—Ä–∞–Ω": "üì±",
    "–µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∞": "‚ö°",
    "—ñ–Ω—à–µ": "üõ†"
}

# –•–µ–ª–ø–µ—Ä–∏
def summary_text():
    total_money = sum(p["price"] for p in phones)
    total_phones = len(phones)
    return f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {total_phones}\nüí∞ –°—É–º–∞: {total_money} –≥—Ä–Ω"

def make_phone_buttons(filtered=None):
    markup = types.InlineKeyboardMarkup()
    if filtered is None:
        filtered = phones
    for i, p in enumerate(filtered):
        emoji = problem_emojis.get(p.get("problem_type", "—ñ–Ω—à–µ"), "üõ†")
        shop_emoji = shops.get(p["shop"], "")
        markup.add(types.InlineKeyboardButton(f"{shop_emoji} {p['model']} {emoji} | {p['price']} –≥—Ä–Ω", callback_data=f"phone_{i}"))
    return markup

def shop_buttons():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in shops:
        markup.add(f"{shops[s]} {s}")
    markup.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    return markup

def filter_shop_buttons():
    markup = types.InlineKeyboardMarkup()
    for s in shops:
        markup.add(types.InlineKeyboardButton(f"{shops[s]} {s}", callback_data=f"filter_{s}"))
    return markup

def sort_buttons(shop_name):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üí∞ –¶—ñ–Ω–∞ ‚Üë", callback_data=f"sort_price_asc_{shop_name}"))
    markup.add(types.InlineKeyboardButton("üí∞ –¶—ñ–Ω–∞ ‚Üì", callback_data=f"sort_price_desc_{shop_name}"))
    markup.add(types.InlineKeyboardButton("üïí –î–∞—Ç–∞ ‚Üë", callback_data=f"sort_date_asc_{shop_name}"))
    markup.add(types.InlineKeyboardButton("üïí –î–∞—Ç–∞ ‚Üì", callback_data=f"sort_date_desc_{shop_name}"))
    return markup

# –°—Ç–∞—Ä—Ç
@bot.message_handler(commands=["start"])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    markup.row("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=markup)

# –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
@bot.message_handler(func=lambda m: m.text=="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone(message):
    msg = bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=shop_buttons())
    bot.register_next_step_handler(msg, choose_shop)

def choose_shop(message):
    text = message.text.replace("üíô","").replace("üíõ","").replace("üíö","").strip()
    if text == "‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω":
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:")
        bot.register_next_step_handler(msg, add_new_shop)
        return
    if text not in shops:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –º–∞–≥–∞–∑–∏–Ω.")
        return
    shop = text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(msg, lambda m: enter_model(m, shop))

def add_new_shop(message):
    new_shop = message.text.strip()
    if new_shop in shops or new_shop == "":
        bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ —ñ–º'—è –ø–æ—Ä–æ–∂–Ω—î.")
        return
    shops[new_shop] = "üß°"  # –ù–æ–≤—ñ –º–∞–≥–∞–∑–∏–Ω–∏ –∑ –æ—Ä–∞–Ω–∂–µ–≤–∏–º –∫–æ–ª—å–æ—Ä–æ–º
    bot.send_message(message.chat.id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω '{new_shop}' –¥–æ–¥–∞–Ω–æ!")
    msg = bot.send_message(message.chat.id, "–í–∏–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=shop_buttons())
    bot.register_next_step_handler(msg, choose_shop)

def enter_model(message, shop):
    model = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É:")
    bot.register_next_step_handler(msg, lambda m: enter_problem(m, shop, model))

def enter_problem(message, shop, model):
    problem = message.text.lower()
    problem_type = "—ñ–Ω—à–µ"
    for key in problem_emojis:
        if key in problem:
            problem_type = key
            break
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É —Ä–µ–º–æ–Ω—Ç—É (—á–∏—Å–ª–æ):")
    bot.register_next_step_handler(msg, lambda m: enter_price(m, shop, model, problem, problem_type))

def enter_price(message, shop, model, problem, problem_type):
    try:
        price = int(message.text)
    except:
        bot.send_message(message.chat.id, "–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return
    phones.append({
        "shop": shop,
        "model": model,
        "problem": problem,
        "problem_type": problem_type,
        "price": price,
        "date": datetime.now()
    })
    bot.send_message(message.chat.id, f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ!\n{shops[shop]} {model} {problem_emojis.get(problem_type,'üõ†')} | {price} –≥—Ä–Ω")

# –ü–µ—Ä–µ–≥–ª—è–¥ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤
@bot.message_handler(func=lambda m: m.text=="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
def view_phones(message):
    if not phones:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    bot.send_message(message.chat.id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=filter_shop_buttons())

# –§—ñ–ª—å—Ç—Ä —Ç–∞ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda c: c.data.startswith("filter_"))
def filter_phones(call):
    shop_name = call.data.split("_")[1]
    filtered = [p for p in phones if p["shop"] == shop_name]
    if not filtered:
        bot.send_message(call.message.chat.id, "–°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return
    bot.send_message(call.message.chat.id, f"–¢–µ–ª–µ—Ñ–æ–Ω–∏ –¥–ª—è {shops.get(shop_name, '')} {shop_name}:", reply_markup=sort_buttons(shop_name))

@bot.callback_query_handler(func=lambda c: c.data.startswith("sort_"))
def sort_phones(call):
    parts = call.data.split("_")
    sort_type, order, shop_name = parts[1], parts[2], "_".join(parts[3:])
    filtered = [p for p in phones if p["shop"] == shop_name]
    if sort_type == "price":
        filtered.sort(key=lambda x: x["price"], reverse=(order=="desc"))
    elif sort_type == "date":
        filtered.sort(key=lambda x: x["date"], reverse=(order=="desc"))
    bot.send_message(call.message.chat.id, f"üìã –¢–µ–ª–µ—Ñ–æ–Ω–∏ –¥–ª—è {shops.get(shop_name,'')} {shop_name}:", reply_markup=make_phone_buttons(filtered))

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è / –í–∏–¥–∞–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda c: c.data.startswith("phone_"))
def phone_options(call):
    index = int(call.data.split("_")[1])
    p = phones[index]
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{index}"))
    markup.add(types.InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{index}"))
    emoji = problem_emojis.get(p.get("problem_type", "—ñ–Ω—à–µ"), "üõ†")
    shop_emoji = shops.get(p["shop"], "")
    bot.edit_message_text(f"{shop_emoji} {p['model']} {emoji} | {p['price']} –≥—Ä–Ω", call.message.chat.id, call.message.message_id, reply_markup=markup)

@bot.callback_query_handler(func=lambda c: c.data.startswith("delete_"))
def delete_phone_callback(call):
    index = int(call.data.split("_")[1])
    deleted = phones.pop(index)
    bot.edit_message_text(f"üóë –í–∏–¥–∞–ª–µ–Ω–æ: {deleted['shop']} | {deleted['model']}", call.message.chat.id, call.message.message_id)

# –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
@bot.callback_query_handler(func=lambda c: c.data.startswith("edit_"))
def edit_phone_callback(call):
    index = int(call.data.split("_")[1])
    p = phones[index]
    bot.send_message(call.message.chat.id, f"–†–µ–¥–∞–≥—É—î–º–æ {p['shop']} | {p['model']}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(call.message, lambda m: edit_model(m, index))

def edit_model(message, index):
    phones[index]["model"] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É:")
    bot.register_next_step_handler(message, lambda m: edit_problem(m, index))

def edit_problem(message, index):
    problem = message.text.lower()
    problem_type = "—ñ–Ω—à–µ"
    for key in problem_emojis:
        if key in problem:
            problem_type = key
            break
    phones[index]["problem"] = problem
    phones[index]["problem_type"] = problem_type
    bot.send_message(message.chat.id, "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É:")
    bot.register_next_step_handler(message, lambda m: edit_price(m, index))

def edit_price(message, index):
    try:
        phones[index]["price"] = int(message.text)
    except:
        bot.send_message(message.chat.id, "–¶—ñ–Ω–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ —á–∏—Å–ª–æ–º.")
        return
    p = phones[index]
    emoji = problem_emojis.get(p.get("problem_type","—ñ–Ω—à–µ"), "üõ†")
    shop_emoji = shops.get(p["shop"], "")
    bot.send_message(message.chat.id, f"‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ: {shop_emoji} {p['model']} {emoji} | {p['price']} –≥—Ä–Ω")

# –ü—ñ–¥—Å—É–º–æ–∫
@bot.message_handler(func=lambda m: m.text=="üìä –ü—ñ–¥—Å—É–º–æ–∫")
def summary(message):
    bot.send_message(message.chat.id, summary_text())

# –ó–∞–ø—É—Å–∫
bot.infinity_polling()