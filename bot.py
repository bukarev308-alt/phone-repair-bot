import json
from telebot import TeleBot, types

TOKEN = "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
bot = TeleBot(TOKEN)

DATA_FILE = "data.json"

# ===================== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö =====================
def load_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {"phones": [], "stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"]}

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# ===================== –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é =====================
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤")
    markup.add("üè¨ –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω", "üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    markup.add("üìä –ü—ñ–¥—Å—É–º–æ–∫")
    return markup

@bot.message_handler(commands=["start"])
def start(message):
    bot.send_message(message.chat.id, "–í—ñ—Ç–∞—é! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())

# ===================== –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É =====================
@bot.message_handler(func=lambda m: m.text=="üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone_step1(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for store in data["stores"]:
        markup.add(f"üè™ {store}")
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    msg = bot.send_message(message.chat.id, "–í–∏–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω:", reply_markup=markup)
    bot.register_next_step_handler(msg, add_phone_step2)

def add_phone_step2(message):
    if message.text=="‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    store = message.text.replace("üè™ ", "")
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(msg, lambda m: add_phone_step3(m, store))

def add_phone_step3(message, store):
    model = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    bot.register_next_step_handler(msg, lambda m: add_phone_step4(m, store, model))

def add_phone_step4(message, store, model):
    problem = message.text
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ü—ñ–Ω—É —Ä–µ–º–æ–Ω—Ç—É:")
    bot.register_next_step_handler(msg, lambda m: add_phone_step5(m, store, model, problem))

def add_phone_step5(message, store, model, problem):
    try:
        price = float(message.text)
    except:
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–ª—è —Ü—ñ–Ω–∏:")
        bot.register_next_step_handler(msg, lambda m: add_phone_step5(m, store, model, problem))
        return
    data["phones"].append({"store": store, "model": model, "problem": problem, "price": price})
    save_data(data)
    bot.send_message(message.chat.id, f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω {model} –¥–æ–¥–∞–Ω–æ –¥–æ {store} –∑–∞ {price}‚Ç¥", reply_markup=main_menu())

# ===================== –î–æ–¥–∞–≤–∞–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É =====================
@bot.message_handler(func=lambda m: m.text=="üè¨ –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
def add_store(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:")
    bot.register_next_step_handler(msg, save_store)

def save_store(message):
    store_name = message.text
    if store_name not in data["stores"]:
        data["stores"].append(store_name)
        save_data(data)
        bot.send_message(message.chat.id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω {store_name} –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –¢–∞–∫–∏–π –º–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î.", reply_markup=main_menu())

# ===================== –í–∏–¥–∞–ª–µ–Ω–Ω—è –º–∞–≥–∞–∑–∏–Ω—É =====================
@bot.message_handler(func=lambda m: m.text=="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
def delete_store_menu(message):
    if not data["stores"]:
        bot.send_message(message.chat.id, "–ú–∞–≥–∞–∑–∏–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    for store in data["stores"]:
        markup.add(f"üóëÔ∏è {store}")
    markup.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    msg = bot.send_message(message.chat.id, "–í–∏–±–µ—Ä–∏ –º–∞–≥–∞–∑–∏–Ω –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", reply_markup=markup)
    bot.register_next_step_handler(msg, delete_store_step)

def delete_store_step(message):
    if message.text=="‚Ü©Ô∏è –ù–∞–∑–∞–¥":
        bot.send_message(message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
        return
    store_name = message.text.replace("üóëÔ∏è ", "")
    if store_name in data["stores"]:
        data["stores"].remove(store_name)
        # –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏ —Ü—å–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É
        data["phones"] = [p for p in data["phones"] if p["store"]!=store_name]
        save_data(data)
        bot.send_message(message.chat.id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω {store_name} –≤–∏–¥–∞–ª–µ–Ω–æ —Ä–∞–∑–æ–º –∑ –π–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏!", reply_markup=main_menu())
    else:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.", reply_markup=main_menu())

# ===================== –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ =====================
@bot.message_handler(func=lambda m: m.text=="üìã –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤")
def list_phones(message):
    if not data["phones"]:
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ —â–µ –Ω–µ–º–∞—î.", reply_markup=main_menu())
        return
    markup = types.InlineKeyboardMarkup()
    for i, p in enumerate(data["phones"]):
        btn = types.InlineKeyboardButton(f"üì± {p['model']} ({p['store']})", callback_data=f"view_{i}")
        markup.add(btn)
    bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω–∏:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_"))
def view_phone(call):
    idx = int(call.data.split("_")[1])
    phone = data["phones"][idx]
    text = f"üè™ {phone['store']}\nüì± {phone['model']}\n‚ö†Ô∏è {phone['problem']}\nüí∞ {phone['price']}‚Ç¥"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data=f"edit_{idx}"))
    markup.add(types.InlineKeyboardButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f"delete_{idx}"))
    markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=markup)

# ===================== –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É =====================
@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_"))
def edit_phone(call):
    idx = int(call.data.split("_")[1])
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ú–æ–¥–µ–ª—å üì±", callback_data=f"edit_model_{idx}"))
    markup.add(types.InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º–∞ ‚ö†Ô∏è", callback_data=f"edit_problem_{idx}"))
    markup.add(types.InlineKeyboardButton("–¶—ñ–Ω–∞ üí∞", callback_data=f"edit_price_{idx}"))
    markup.add(types.InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"view_{idx}"))
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                          text="–©–æ —Ö–æ—á–µ—à —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏?", reply_markup=markup)

def register_edit_handler(idx, field_name, prompt, convert=lambda x:x):
    msg = bot.send_message(call.message.chat.id, prompt)
    bot.register_next_step_handler(msg, lambda m: save_edit(m, idx, field_name, convert))

def save_edit(message, idx, field_name, convert):
    try:
        new_value = convert(message.text)
    except:
        msg = bot.send_message(message.chat.id, "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç, —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, lambda m: save_edit(m, idx, field_name, convert))
        return
    data["phones"][idx][field_name] = new_value
    save_data(data)
    bot.send_message(message.chat.id, "‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu())

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_model_"))
def edit_model(call):
    idx = int(call.data.split("_")[2])
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É –º–æ–¥–µ–ª—å:")
    bot.register_next_step_handler(msg, lambda m: save_edit(m, idx, "model"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_problem_"))
def edit_problem(call):
    idx = int(call.data.split("_")[2])
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É –ø—Ä–æ–±–ª–µ–º—É:")
    bot.register_next_step_handler(msg, lambda m: save_edit(m, idx, "problem"))

@bot.callback_query_handler(func=lambda call: call.data.startswith("edit_price_"))
def edit_price(call):
    idx = int(call.data.split("_")[2])
    msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏ –Ω–æ–≤—É —Ü—ñ–Ω—É:")
    bot.register_next_step_handler(msg, lambda m: save_edit(m, idx, "price", float))

# ===================== –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—É =====================
@bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
def delete_phone(call):
    idx = int(call.data.split("_")[1])
    removed = data["phones"].pop(idx)
    save_data(data)
    bot.answer_callback_query(call.id, f"üóëÔ∏è {removed['model']} –≤–∏–¥–∞–ª–µ–Ω–æ!")
    list_phones(call.message)

# ===================== –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤ –º–µ–Ω—é =====================
@bot.callback_query_handler(func=lambda call: call.data=="back_main")
def back_main(call):
    bot.send_message(call.message.chat.id, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ===================== –ü—ñ–¥—Å—É–º–æ–∫ =====================
@bot.message_handler(func=lambda m: m.text=="üìä –ü—ñ–¥—Å—É–º–æ–∫")
def summary(message):
    total = sum(p["price"] for p in data["phones"])
    count = len(data["phones"])
    bot.send_message(message.chat.id, f"üìä –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {count}\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {total}‚Ç¥", reply_markup=main_menu())

# ===================== –ó–∞–ø—É—Å–∫ =====================
bot.infinity_polling()