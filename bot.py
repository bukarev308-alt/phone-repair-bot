import os
import json
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "YOUR_BOT_TOKEN_HERE"
bot = TeleBot(TOKEN)
DATA_FILE = "data.json"

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø / –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
# =======================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": [], "archive": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}

def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –ú–ï–ù–Æ
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üì¶ –ê—Ä—Ö—ñ–≤")
    kb.add("üì• –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å", "–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def archive_week_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weeks = sorted({(p["year"], p["week"]) for p in data["archive"]}, reverse=True)
    for year, week in weeks:
        kb.add(f"–¢–∏–∂–¥–µ–Ω—å {week} ({year})")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –°–¢–ê–†–¢
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone_start(message):
    chat_id = message.chat.id
    push_state(chat_id, "add_store")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())

# =======================
# –ü–ï–†–ï–ù–ï–°–ï–ù–ù–Ø –¢–ò–ñ–ù–Ø –í –ê–†–•–Ü–í
# =======================
@bot.message_handler(func=lambda m: m.text == "üì• –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
def archive_week(message):
    chat_id = message.chat.id
    now = datetime.now()
    start_week = now - timedelta(days=7)

    to_archive = []
    for p in data["phones"]:
        phone_date = datetime.strptime(p["date"], "%d.%m.%Y %H:%M")
        if phone_date >= start_week:
            week_num = phone_date.isocalendar()[1]
            year = phone_date.year
            archived_phone = p.copy()
            archived_phone["week"] = week_num
            archived_phone["year"] = year
            to_archive.append(archived_phone)

    if not to_archive:
        bot.send_message(chat_id, "üì≠ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤—É.", reply_markup=main_menu())
        return

    data["archive"].extend(to_archive)
    data["phones"] = [p for p in data["phones"] if datetime.strptime(p["date"], "%d.%m.%Y %H:%M") < start_week]
    save_data(data)

    bot.send_message(chat_id, f"üì¶ {len(to_archive)} —Ä–µ–º–æ–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤!\nüÜï –ù–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å –ø–æ—á–∞–≤—Å—è.", reply_markup=main_menu())

# =======================
# –ü–ï–†–ï–ì–õ–Ø–î –ê–†–•–Ü–í–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì¶ –ê—Ä—Ö—ñ–≤")
def choose_archive_week(message):
    chat_id = message.chat.id
    if not data["archive"]:
        bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
        return
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=archive_week_menu())
    push_state(chat_id, "archive_select_week")

@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_select_week")
def show_archive_week(message):
    chat_id = message.chat.id
    txt = message.text
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
    try:
        parts = txt.split()
        week_num = int(parts[1])
        year = int(parts[2].strip("()"))
    except:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=archive_week_menu())
        return

    phones = [p for p in data["archive"] if p.get("week") == week_num and p.get("year") == year]
    if not phones:
        bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ–º–∞—î.", reply_markup=archive_week_menu())
        return

    text = f"üì¶ –ê—Ä—Ö—ñ–≤: —Ç–∏–∂–¥–µ–Ω—å {week_num} ({year})\n\n"
    for i, p in enumerate(phones, 1):
        text += (f"{i}. {p['model']} ({p['store']})\n"
                 f"üîß {p['problem']}\n"
                 f"üí∞ {p['price']} –≥—Ä–Ω\n"
                 f"üïí {p['date']}\n\n")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=kb)

@bot.message_handler(func=lambda m: m.text == "üóë –û—á–∏—Å—Ç–∏—Ç–∏ –∞—Ä—Ö—ñ–≤")
def clear_archive(message):
    chat_id = message.chat.id
    data["archive"].clear()
    save_data(data)
    bot.send_message(chat_id, "‚úÖ –ê—Ä—Ö—ñ–≤ –æ—á–∏—â–µ–Ω–æ.", reply_markup=main_menu())

# =======================
# –ó–í–Ü–¢–ò
# =======================
def generate_report(period="week"):
    now = datetime.now()
    start = now - timedelta(days=7 if period=="week" else 30)
    phones = [p for p in data["phones"] if datetime.strptime(p["date"], "%d.%m.%Y %H:%M") >= start]
    total = sum(p["price"] for p in phones)
    count = len(phones)
    stores_summary = {}
    for p in phones:
        stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
    report = f"üìä –ó–≤—ñ—Ç –∑–∞ {period}:\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {count}\nüí∞ –°—É–º–∞: {total} –≥—Ä–Ω\n\n"
    report += "\n".join(f"‚Ä¢ {s}: {v} –≥—Ä–Ω" for s, v in stores_summary.items())
    return report

@bot.message_handler(func=lambda m: m.text in ["–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç", "–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç"])
def report_handler(message):
    chat_id = message.chat.id
    period = "week" if message.text=="–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç" else "month"
    bot.send_message(chat_id, generate_report(period), parse_mode="HTML", reply_markup=main_menu())

# =======================
# –ì–ï–ù–ï–†–ò–ß–ù–ò–ô –û–ë–†–û–ë–ù–ò–ö –¢–ï–õ–ï–§–û–ù–Ü–í
# =======================
@bot.message_handler(func=lambda m: True)
def generic_handler(message):
    chat_id = message.chat.id
    txt = message.text
    state = current_state(chat_id)

    # -----------------------
    # –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ
    # -----------------------
    if txt == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏":
        if not data["phones"]:
            bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
            return
        text = "üìã <b>–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤:</b>\n\n"
        for i,p in enumerate(data["phones"],1):
            text += f"{i}. {p['model']} ({p['store']})\nüîß {p['problem']}\nüí∞ {p['price']} –≥—Ä–Ω\nüïí {p['date']}\n\n"
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        return

    elif txt == "üè™ –ú–∞–≥–∞–∑–∏–Ω–∏":
        text = "üè™ <b>–°–ø–∏—Å–æ–∫ –º–∞–≥–∞–∑–∏–Ω—ñ–≤:</b>\n" + "\n".join(f"‚Ä¢ {s}" for s in data["stores"])
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        return

    elif txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        state = current_state(chat_id)
        if not state:
            bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # =======================
    # –î–û–î–ê–í–ê–ù–ù–Ø
    # =======================
    if state == "add_store":
        if txt == "‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω":
            push_state(chat_id, "add_new_store")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –Ω–æ–≤–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω—É:", reply_markup=back_button())
            return
        elif txt in data["stores"]:
            user_state[chat_id]["tmp"]["store"] = txt
            push_state(chat_id, "add_model")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º–æ–¥–µ–ª—å —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
            return
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –¥–æ–¥–∞–π—Ç–µ –Ω–æ–≤–∏–π.", reply_markup=stores_menu())
            return

    if state == "add_new_store":
        store_name = txt.strip()
        if store_name and store_name not in data["stores"]:
            data["stores"].append(store_name)
            save_data(data)
            bot.send_message(chat_id, f"‚úÖ –ú–∞–≥–∞–∑–∏–Ω ¬´{store_name}¬ª –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        else:
            bot.send_message(chat_id, "‚ùå –ú–∞–≥–∞–∑–∏–Ω –≤–∂–µ —ñ—Å–Ω—É—î –∞–±–æ –Ω–∞–∑–≤–∞ –ø—É—Å—Ç–∞.", reply_markup=back_button())
        pop_state(chat_id)
        return

    if state == "add_model":
        user_state[chat_id]["tmp"]["model"] = txt
        push_state(chat_id, "add_problem")
        bot.send_message(chat_id, "–û–ø–∏—à—ñ—Ç—å –ø—Ä–æ–±–ª–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É:", reply_markup=back_button())
        return

    if state == "add_problem":
        user_state[chat_id]["tmp"]["problem"] = txt
        push_state(chat_id, "add_price")
        bot.send_message(chat_id, "–í–∫–∞–∂—ñ—Ç—å —Ü—ñ–Ω—É —Ä–µ–º–æ–Ω—Ç—É:", reply_markup=back_button())
        return

    if state == "add_price":
        try:
            price = float(txt)
            user_state[chat_id]["tmp"]["price"] = price
            phone = {
                "store": user_state[chat_id]["tmp"]["store"],
                "model": user_state[chat_id]["tmp"]["model"],
                "problem": user_state[chat_id]["tmp"]["problem"],
                "price": price,
                "date": datetime.now().strftime("%d.%m.%Y %H:%M")
            }
            data["phones"].append(phone)
            save_data(data)
            bot.send_message(chat_id, "‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–¥–∞–Ω–æ!", reply_markup=main_menu())
            clear_state(chat_id)
        except ValueError:
            bot.send_message(chat_id, "‚ùå –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ.", reply_markup=back_button())
        return

    # =======================
    # –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø / –í–ò–î–ê–õ–ï–ù–ù–Ø
    # =======================
    field_map = {"–ú–∞–≥–∞–∑–∏–Ω":"store","–ú–æ–¥–µ–ª—å":"model","–ü—Ä–æ–±–ª–µ–º–∞":"problem","–¶—ñ–Ω–∞":"price"}

    if state == "edit_select":
        try:
            idx = int(txt.split(".")[0])-1
            if 0<=idx<len(data["phones"]):
                user_state[chat_id]["tmp"]["edit_idx"]=idx
                push_state(chat_id,"edit_action")
                bot.send_message(chat_id,"–û–±—Ä–∞—Ç–∏ –¥—ñ—é:", reply_markup=edit_action_menu())
            else:
                bot.send_message(chat_id,"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=back_button())
        except:
            bot.send_message(chat_id,"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=back_button())
        return

    if state=="edit_action":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        if txt=="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏":
            push_state(chat_id,"edit_field")
            bot.send_message(chat_id,"–©–æ —Ä–µ–¥–∞–≥—É—î–º–æ?", reply_markup=edit_field_menu())
        elif txt=="üóë –í–∏–¥–∞–ª–∏—Ç–∏":
            push_state(chat_id,"confirm_delete")
            bot.send_message(chat_id,f"–í–∏–¥–∞–ª–∏—Ç–∏ {data['phones'][idx]['model']}?", reply_markup=confirm_delete_menu())
        return

    if state=="edit_field":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        user_state[chat_id]["tmp"]["field"]=txt
        push_state(chat_id,"edit_enter")
        bot.send_message(chat_id,f"–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è {txt}:", reply_markup=back_button())
        return

    if state=="edit_enter":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        field = user_state[chat_id]["tmp"]["field"]
        value = txt
        if field=="–¶—ñ–Ω–∞":
            try:
                value=float(value)
            except:
                bot.send_message(chat_id,"‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ.", reply_markup=back_button())
                return
        elif field=="–ú–∞–≥–∞–∑–∏–Ω":
            if value not in data["stores"]:
                data["stores"].append(value)
        key = field_map[field]
        data["phones"][idx][key]=value
        save_data(data)
        bot.send_message(chat_id,f"‚úÖ {field} –æ–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=main_menu())
        clear_state(chat_id)
        return

    if state=="confirm_delete":
        idx = user_state[chat_id]["tmp"]["edit_idx"]
        if txt=="‚úÖ –¢–∞–∫":
            removed = data["phones"].pop(idx)
            save_data(data)
            bot.send_message(chat_id,f"üóë –¢–µ–ª–µ—Ñ–æ–Ω {removed['model']} –≤–∏–¥–∞–ª–µ–Ω–æ!", reply_markup=main_menu())
        else:
            bot.send_message(chat_id,"‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
        clear_state(chat_id)
        return

# =======================
# –°–¢–ê–†–¢ –ë–û–¢–ê
# =======================
bot.infinity_polling()