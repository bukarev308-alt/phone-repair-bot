import os
import json
import threading
import re
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
DATA_FILE = "data.json"
ARCHIVE_FILE = "archive.json"

bot = TeleBot(TOKEN)
data_lock = threading.Lock()

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø / –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø
# =======================
def load_data():
    with data_lock:
        if not os.path.exists(DATA_FILE):
            return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": []}
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)

def save_data(d):
    with data_lock:
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(d, f, ensure_ascii=False, indent=2)

def load_archive():
    with data_lock:
        if not os.path.exists(ARCHIVE_FILE):
            return []
        with open(ARCHIVE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)

def save_archive(a):
    with data_lock:
        with open(ARCHIVE_FILE, "w", encoding="utf-8") as f:
            json.dump(a, f, ensure_ascii=False, indent=2)

data = load_data()
archive = load_archive()

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}
def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()
    if not user_state[chat_id]["stack"]:
        user_state[chat_id]["tmp"] = {}

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –£–¢–ò–õ–Ü–¢–ò
# =======================
def fmt_price(p):
    try:
        if int(p) == p:
            return f"{int(p)}"
    except Exception:
        pass
    return f"{p}"

def phone_display(p):
    return (f"{p['model']} ({p['store']})\n"
            f"üîß {p['problem']}\n"
            f"üí∞ {fmt_price(p['price'])} –≥—Ä–Ω\n"
            f"üïí {p['date']}")

def phone_short(p):
    return f"{p['model']} ({p['store']})"

# =======================
# –ö–õ–ê–í–Ü–ê–¢–£–†–ò
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üóÇ –ê—Ä—Ö—ñ–≤")
    kb.add("üìù –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤", "üìä –ó–≤—ñ—Ç")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu(include_add=True):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    if include_add:
        kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å")
    kb.add("–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def phones_list_keyboard(phones):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i, p in enumerate(phones, 1):
        kb.add(f"{i}. {phone_short(p)}")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def archive_week_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for w in archive:
        kb.add(w["week"])
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def archive_view_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üîΩ –ü–æ–∫–∞–∑–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏", "üîº –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å")
    kb.add("üì§ –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∑ –∞—Ä—Ö—ñ–≤—É")
    kb.add("üóë –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def archive_report_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ü–æ —Ç–∏–∂–Ω—é", "–ü–æ –º—ñ—Å—è—Ü—é")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def archive_report_type_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üí∞ –°—É–º–∏", "üì± –°—É–º–∏ + —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –°–¢–ê–†–¢
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –¢–£–¢ –í–°–¢–ê–í –õ–ò–®–ï –í–°–Ü –§–£–ù–ö–¶–Ü–á –¢–í–û–ì–û –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ö–û–î–£
# (–¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –∞—Ä—Ö—ñ–≤, –≤–∏–¥–∞–ª–µ–Ω–Ω—è, –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—è —Ç–∏–∂–Ω—è)
# =======================

# =======================
# –ó–í–Ü–¢–ò
# =======================
@bot.message_handler(func=lambda m: m.text == "üìä –ó–≤—ñ—Ç")
def report_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    push_state(chat_id, "report_period")
    bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –∑–≤—ñ—Ç—É:", reply_markup=archive_report_menu())

@bot.message_handler(func=lambda m: current_state(m.chat.id) in ["report_period", "report_week_select", "report_month_select", "report_type"])
def report_handler(message):
    chat_id = message.chat.id
    txt = message.text.strip()
    state = current_state(chat_id)

    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return

    # –û–±–∏—Ä–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥
    if state == "report_period":
        if txt == "–ü–æ —Ç–∏–∂–Ω—é":
            if not archive:
                bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
                clear_state(chat_id)
                return
            push_state(chat_id, "report_week_select")
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for w in archive:
                kb.add(w["week"])
            kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
            bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –∑–≤—ñ—Ç—É:", reply_markup=kb)
        elif txt == "–ü–æ –º—ñ—Å—è—Ü—é":
            push_state(chat_id, "report_month_select")
            bot.send_message(chat_id, "–í–≤–µ–¥—ñ—Ç—å –º—ñ—Å—è—Ü—å —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM:", reply_markup=back_button())
        else:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –º–µ–Ω—é.", reply_markup=archive_report_menu())
        return

    # –í–∏–±—ñ—Ä —Ç–∏–∂–Ω—è
    if state == "report_week_select":
        weeks = [w["week"] for w in archive]
        if txt not in weeks:
            bot.send_message(chat_id, "‚ùå –û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –∑—ñ —Å–ø–∏—Å–∫—É.", reply_markup=archive_week_menu())
            return
        idx = weeks.index(txt)
        user_state[chat_id]["tmp"]["report_week_index"] = idx
        push_state(chat_id, "report_type")
        bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—É:", reply_markup=archive_report_type_menu())
        return

    # –í–∏–±—ñ—Ä –º—ñ—Å—è—Ü—è
    if state == "report_month_select":
        try:
            month_date = datetime.strptime(txt + "-01", "%Y-%m-%d")
            user_state[chat_id]["tmp"]["report_month"] = month_date
            push_state(chat_id, "report_type")
            bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∑–≤—ñ—Ç—É:", reply_markup=archive_report_type_menu())
        except:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ YYYY-MM.", reply_markup=back_button())
        return

    # –í–∏–±—ñ—Ä —Ç–∏–ø—É –∑–≤—ñ—Ç—É
    if state == "report_type":
        report_format = txt
        tmp = user_state[chat_id]["tmp"]

        # –ó–≤—ñ—Ç –ø–æ —Ç–∏–∂–Ω—é
        if "report_week_index" in tmp:
            week = archive[tmp["report_week_index"]]
            phones = week.get("phones", [])
        # –ó–≤—ñ—Ç –ø–æ –º—ñ—Å—è—Ü—é
        elif "report_month" in tmp:
            month = tmp["report_month"]
            phones = []
            for w in archive:
                for p in w.get("phones", []):
                    p_date = datetime.strptime(p["date"].split()[0], "%d.%m.%Y")
                    if p_date.year == month.year and p_date.month == month.month:
                        phones.append(p)
        else:
            bot.send_message(chat_id, "‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç.", reply_markup=main_menu())
            clear_state(chat_id)
            return

        total = sum(float(p["price"]) for p in phones)
        text = f"üìä –ó–≤—ñ—Ç:\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤: {len(phones)}\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {fmt_price(total)} –≥—Ä–Ω\n\n"

        if report_format == "üì± –°—É–º–∏ + —Ç–µ–ª–µ—Ñ–æ–Ω–∏":
            for i, p in enumerate(phones, 1):
                text += f"{i}. {phone_display(p)}\n\n"

        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())
        clear_state(chat_id)
        return

# =======================
# –°–¢–ê–†–¢ –ë–û–¢–ê
# =======================
if __name__ == "__main__":
    print("Bot started...")
    bot.infinity_polling()