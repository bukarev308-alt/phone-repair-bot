# bot_weekly_archive_final.py
import os
import json
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
# =======================
TOKEN = os.getenv("BOT_TOKEN") or "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"
bot = TeleBot(TOKEN)
DATA_FILE = "data.json"
DATE_FORMAT = "%d.%m.%Y %H:%M"

DEFAULT_DATA = {
    "stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"],
    "current_week_key": None,
    "weeks": {},
    "archive": {}
}

# =======================
# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è / –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
# =======================
def load_data():
    if not os.path.exists(DATA_FILE):
        return init_data()
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        try:
            d = json.load(f)
        except json.JSONDecodeError:
            return init_data()
    if "phones" in d and ("weeks" not in d or "archive" not in d):
        d = migrate_old_flat_data(d)
    for k in DEFAULT_DATA:
        if k not in d:
            d[k] = DEFAULT_DATA[k] if k != "current_week_key" else None
    if not d.get("current_week_key"):
        d["current_week_key"] = get_week_label_for_date(datetime.now().date())
    if d["current_week_key"] not in d.get("weeks", {}):
        d["weeks"][d["current_week_key"]] = []
    save_data(d)
    return d

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def init_data():
    d = DEFAULT_DATA.copy()
    current_key = get_week_label_for_date(datetime.now().date())
    d["current_week_key"] = current_key
    d["weeks"] = {current_key: []}
    save_data(d)
    return d

def migrate_old_flat_data(d_old):
    d = DEFAULT_DATA.copy()
    if "stores" in d_old:
        d["stores"] = d_old["stores"]
    current_key = get_week_label_for_date(datetime.now().date())
    d["current_week_key"] = current_key
    d["weeks"] = {current_key: d_old.get("phones", [])}
    save_data(d)
    return d

# =======================
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–∞—Ç–∏ / —Ç–∏–∂–Ω—ñ
# =======================
def get_week_start(date_obj):
    weekday = date_obj.weekday()
    return date_obj - timedelta(days=weekday)

def get_week_end(date_obj):
    return get_week_start(date_obj) + timedelta(days=6)

def date_to_str(d):
    return d.strftime("%d.%m.%Y")

def get_week_label_for_date(date_obj):
    start = get_week_start(date_obj)
    end = get_week_end(date_obj)
    return f"–¢–∏–∂–¥–µ–Ω—å {date_to_str(start)} ‚Äî {date_to_str(end)}"

def ensure_current_week_exists(data):
    cur_key = data.get("current_week_key")
    if not cur_key:
        cur_key = get_week_label_for_date(datetime.now().date())
        data["current_week_key"] = cur_key
    if cur_key not in data.get("weeks", {}):
        data["weeks"][cur_key] = []
    return data

# =======================
# –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
# =======================
user_state = {}  # chat_id -> {"stack": [], "tmp": {}}

def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        return user_state[chat_id]["stack"].pop()
    return None

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# Keyboards
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.row("üìä –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å", "üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ –º—ñ—Å—è—Ü—å")
    kb.row("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üßπ –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å")
    kb.row("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å", "–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def view_choice_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÖ –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", "üì¶ –ê—Ä—Ö—ñ–≤")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
# =======================
data = load_data()
ensure_current_week_exists(data)

# =======================
# –§—É–Ω–∫—Ü—ñ—ó –ø—ñ–¥—Å—É–º–∫—ñ–≤ —Ç–∞ –∞—Ä—Ö—ñ–≤—É
# =======================
def summarize_week(chat_id, week_label, phones):
    if not phones:
        bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –Ω–µ–º–∞—î.", reply_markup=main_menu())
        return
    total = sum(p["price"] for p in phones)
    count = len(phones)
    stores_summary = {}
    for p in phones:
        stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
    store_text = "\n".join(f"‚Ä¢ {s}: {v:.2f} –≥—Ä–Ω" for s, v in stores_summary.items())
    bot.send_message(chat_id,
                     f"üìä –ü—ñ–¥—Å—É–º–æ–∫ ‚Äî {week_label}\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {count}\nüí∞ –°—É–º–∞: {total:.2f} –≥—Ä–Ω\n\n<b>–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:</b>\n{store_text}",
                     parse_mode="HTML", reply_markup=main_menu())

def summarize_month(chat_id):
    now = datetime.now().date()
    month = now.month
    year = now.year
    total = 0
    count = 0
    stores_summary = {}
    for week_label, phones in {**data.get("archive", {}), data["current_week_key"]: data["weeks"].get(data["current_week_key"], [])}.items():
        try:
            start_str = week_label.split("‚Äî")[0].replace("–¢–∏–∂–¥–µ–Ω—å ", "").strip()
            start_date = datetime.strptime(start_str, "%d.%m.%Y").date()
            if start_date.month == month and start_date.year == year:
                for p in phones:
                    total += p["price"]
                    count += 1
                    stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
        except:
            continue
    if count == 0:
        bot.send_message(chat_id, "üì≠ –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å.", reply_markup=main_menu())
        return
    store_text = "\n".join(f"‚Ä¢ {s}: {v:.2f} –≥—Ä–Ω" for s, v in stores_summary.items())
    bot.send_message(chat_id,
                     f"üìÖ –ü—ñ–¥—Å—É–º–æ–∫ –∑–∞ {now.strftime('%B %Y')}\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {count}\nüí∞ –°—É–º–∞: {total:.2f} –≥—Ä–Ω\n\n<b>–ü–æ –º–∞–≥–∞–∑–∏–Ω–∞—Ö:</b>\n{store_text}",
                     parse_mode="HTML", reply_markup=main_menu())

def show_archive_weeks(chat_id):
    if not data.get("archive"):
        bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
        clear_state(chat_id)
        return
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    entries = []
    for week_label, phones in data.get("archive", {}).items():
        cnt = len(phones)
        total = sum(p["price"] for p in phones) if phones else 0
        entries.append((week_label, cnt, total))
    def parse_start(label):
        try:
            start_str = label.split("‚Äî")[0].replace("–¢–∏–∂–¥–µ–Ω—å ", "").strip()
            return datetime.strptime(start_str, "%d.%m.%Y")
        except:
            return datetime.min
    entries.sort(key=lambda x: parse_start(x[0]), reverse=True)
    for week_label, cnt, total in entries:
        kb.add(f"{week_label} ‚Äî {cnt} –æ–¥., {int(total)} –≥—Ä–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    push_state(chat_id, "archive_list")
    bot.send_message(chat_id, "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å (–∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç):", reply_markup=kb)

def show_archive_details(chat_id, week_label):
    phones = data["archive"].get(week_label, [])
    if not phones:
        bot.send_message(chat_id, f"üì¶ {week_label} ‚Äî –ø–æ—Ä–æ–∂–Ω—å–æ", reply_markup=main_menu())
        return
    text = f"üì¶ <b>{week_label}</b>:\n\n"
    for i, p in enumerate(phones, 1):
        text += (f"{i}. {p['model']} ({p['store']})\n"
                 f"üîß {p['problem']}\n"
                 f"üí∞ {p['price']:.2f} –≥—Ä–Ω\n"
                 f"üïí {p['date']}\n\n")
    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=main_menu())

# =======================
# START
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –î–∞–ª—ñ –π–¥–µ generic_handler —ñ –≤—Å—ñ —Å—Ç–∞–Ω–∏
# =======================
# (–¢—É—Ç –º–æ–∂–Ω–∞ –≤—Å—Ç–∞–≤–∏—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è,
# —è–∫ —É –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∫–æ–¥—ñ, –∞–ª–µ –≤–∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ —Ç–∞ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∞—Ä—Ö—ñ–≤—É)

# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")
    bot.infinity_polling()