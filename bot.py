import os
import json
from datetime import datetime, timedelta
from telebot import TeleBot, types

# =======================
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø –ë–û–¢–ê
# =======================
TOKEN = os.getenv("BOT_TOKEN")

# –Ø–∫—â–æ –∑–º—ñ–Ω–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è –∞–±–æ None, –ø—ñ–¥—Å—Ç–∞–≤–ª—è—î–º–æ —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É
if not TOKEN:
    TOKEN = "8494392250:AAFpY_MbOCw0psxn6yefA3b-s_83gGPKoLc"  # <-- –≤—Å—Ç–∞–≤ —Å–≤—ñ–π —Å–ø—Ä–∞–≤–∂–Ω—ñ–π —Ç–æ–∫–µ–Ω —Å—é–¥–∏

# –û—á–∏—â–∞—î–º–æ –∑–∞–π–≤—ñ –ø—Ä–æ–±—ñ–ª–∏
TOKEN = TOKEN.strip()

# –ü–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
if ":" not in TOKEN:
    raise ValueError("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω! –¢–æ–∫–µ–Ω –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –¥–≤–æ–∫—Ä–∞–ø–∫—É (:).")

bot = TeleBot(TOKEN)
print("‚úÖ –ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!")

# =======================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =======================
DATA_FILE = "data.json"

# =======================
# –ó–ê–í–ê–ù–¢–ê–ñ–ï–ù–ù–Ø / –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –î–ê–ù–ò–•
# =======================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"stores": ["It Center", "–õ–µ—Å—è", "–û—Å–æ–±–∏—Å—Ç—ñ"], "phones": [], "archive": []}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

data = load_data()

# =======================
# –°–¢–ê–ù –ö–û–†–ò–°–¢–£–í–ê–ß–ê
# =======================
user_state = {}

def ensure_state(chat_id):
    if chat_id not in user_state:
        user_state[chat_id] = {"stack": [], "tmp": {}}

def push_state(chat_id, state_name):
    ensure_state(chat_id)
    user_state[chat_id]["stack"].append(state_name)

def pop_state(chat_id):
    ensure_state(chat_id)
    if user_state[chat_id]["stack"]:
        user_state[chat_id]["stack"].pop()

def current_state(chat_id):
    ensure_state(chat_id)
    return user_state[chat_id]["stack"][-1] if user_state[chat_id]["stack"] else None

def clear_state(chat_id):
    user_state[chat_id] = {"stack": [], "tmp": {}}

# =======================
# –ú–ï–ù–Æ
# =======================
def main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω", "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∏")
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ / üóë –í–∏–¥–∞–ª–∏—Ç–∏", "üìä –ü—ñ–¥—Å—É–º–æ–∫")
    kb.add("üè™ –ú–∞–≥–∞–∑–∏–Ω–∏", "üì¶ –ê—Ä—Ö—ñ–≤")
    kb.add("üì• –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
    kb.add("–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç", "–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç")
    return kb

def back_button():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def stores_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for s in data["stores"]:
        kb.add(s)
    kb.add("‚ûï –î–æ–¥–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_action_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", "üóë –í–∏–¥–∞–ª–∏—Ç–∏")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def edit_field_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ú–∞–≥–∞–∑–∏–Ω", "–ú–æ–¥–µ–ª—å", "–ü—Ä–æ–±–ª–µ–º–∞", "–¶—ñ–Ω–∞")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

def confirm_delete_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚úÖ –¢–∞–∫", "‚ùå –ù—ñ")
    return kb

def archive_week_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weeks = sorted({(p["year"], p["week"]) for p in data["archive"]}, reverse=True)
    for year, week in weeks:
        kb.add(f"–¢–∏–∂–¥–µ–Ω—å {week} ({year})")
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    return kb

# =======================
# –°–¢–ê–†–¢
# =======================
@bot.message_handler(commands=["start"])
def cmd_start(message):
    chat_id = message.chat.id
    clear_state(chat_id)
    bot.send_message(chat_id, "–ü—Ä–∏–≤—ñ—Ç! üëã\n–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

# =======================
# –î–û–î–ê–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì± –î–æ–¥–∞—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω")
def add_phone_start(message):
    chat_id = message.chat.id
    push_state(chat_id, "add_store")
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å –º–∞–≥–∞–∑–∏–Ω:", reply_markup=stores_menu())

# =======================
# –ü–ï–†–ï–ù–ï–°–ï–ù–ù–Ø –¢–ò–ñ–ù–Ø –í –ê–†–•–Ü–í
# =======================
@bot.message_handler(func=lambda m: m.text == "üì• –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ —Ç–∏–∂–¥–µ–Ω—å –≤ –∞—Ä—Ö—ñ–≤")
def archive_week(message):
    chat_id = message.chat.id
    now = datetime.now()
    start_week = now - timedelta(days=7)

    to_archive = []
    for p in data["phones"]:
        phone_date = datetime.strptime(p["date"], "%d.%m.%Y %H:%M")
        if phone_date >= start_week:
            week_num = phone_date.isocalendar()[1]
            year = phone_date.year
            archived_phone = p.copy()
            archived_phone["week"] = week_num
            archived_phone["year"] = year
            to_archive.append(archived_phone)

    if not to_archive:
        bot.send_message(chat_id, "üì≠ –ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ–º–∞—î —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –¥–ª—è –∞—Ä—Ö—ñ–≤—É.", reply_markup=main_menu())
        return

    data["archive"].extend(to_archive)
    data["phones"] = [p for p in data["phones"] if datetime.strptime(p["date"], "%d.%m.%Y %H:%M") < start_week]
    save_data(data)

    bot.send_message(chat_id, f"üì¶ {len(to_archive)} —Ä–µ–º–æ–Ω—Ç—ñ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –∞—Ä—Ö—ñ–≤!\nüÜï –ù–æ–≤–∏–π —Ç–∏–∂–¥–µ–Ω—å –ø–æ—á–∞–≤—Å—è.", reply_markup=main_menu())

# =======================
# –ü–ï–†–ï–ì–õ–Ø–î –ê–†–•–Ü–í–£
# =======================
@bot.message_handler(func=lambda m: m.text == "üì¶ –ê—Ä—Ö—ñ–≤")
def choose_archive_week(message):
    chat_id = message.chat.id
    if not data["archive"]:
        bot.send_message(chat_id, "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.", reply_markup=main_menu())
        return
    bot.send_message(chat_id, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–∂–¥–µ–Ω—å –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É:", reply_markup=archive_week_menu())
    push_state(chat_id, "archive_select_week")

@bot.message_handler(func=lambda m: current_state(m.chat.id) == "archive_select_week")
def show_archive_week(message):
    chat_id = message.chat.id
    txt = message.text
    if txt == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        pop_state(chat_id)
        bot.send_message(chat_id, "–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.", reply_markup=main_menu())
        return
    try:
        parts = txt.split()
        week_num = int(parts[1])
        year = int(parts[2].strip("()"))
    except:
        bot.send_message(chat_id, "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.", reply_markup=archive_week_menu())
        return

    phones = [p for p in data["archive"] if p.get("week") == week_num and p.get("year") == year]
    if not phones:
        bot.send_message(chat_id, "üì≠ –¢–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –∑–∞ —Ü–µ–π —Ç–∏–∂–¥–µ–Ω—å –Ω–µ–º–∞—î.", reply_markup=archive_week_menu())
        return

    text = f"üì¶ –ê—Ä—Ö—ñ–≤: —Ç–∏–∂–¥–µ–Ω—å {week_num} ({year})\n\n"
    for i, p in enumerate(phones, 1):
        text += (f"{i}. {p['model']} ({p['store']})\n"
                 f"üîß {p['problem']}\n"
                 f"üí∞ {p['price']} –≥—Ä–Ω\n"
                 f"üïí {p['date']}\n\n")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=kb)

# =======================
# –ó–í–Ü–¢–ò
# =======================
def generate_report(period="week"):
    now = datetime.now()
    start = now - timedelta(days=7 if period=="week" else 30)
    phones = [p for p in data["phones"] if datetime.strptime(p["date"], "%d.%m.%Y %H:%M") >= start]
    total = sum(p["price"] for p in phones)
    count = len(phones)
    stores_summary = {}
    for p in phones:
        stores_summary[p["store"]] = stores_summary.get(p["store"], 0) + p["price"]
    report = f"üìä –ó–≤—ñ—Ç –∑–∞ {period}:\nüî¢ –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {count}\nüí∞ –°—É–º–∞: {total} –≥—Ä–Ω\n\n"
    report += "\n".join(f"‚Ä¢ {s}: {v} –≥—Ä–Ω" for s, v in stores_summary.items())
    return report

@bot.message_handler(func=lambda m: m.text in ["–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç", "–ú—ñ—Å—è—á–Ω–∏–π –∑–≤—ñ—Ç"])
def report_handler(message):
    chat_id = message.chat.id
    period = "week" if message.text=="–¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç" else "month"
    bot.send_message(chat_id, generate_report(period), parse_mode="HTML", reply_markup=main_menu())

# =======================
# –î–û–î–ê–í–ê–ù–ù–Ø, –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –¢–ï–õ–ï–§–û–ù–Ü–í
# =======================
# (–¢—É—Ç –≤—Å—Ç–∞–≤–ª—è—î–º–æ —É–≤–µ—Å—å –±–ª–æ–∫ generic_handler –∑ —Ç–≤–æ–≥–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–¥—É)
# –í—ñ–Ω –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω, –±–æ –≤–∂–µ –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ

@bot.message_handler(func=lambda m: True)
def generic_handler(message):
    chat_id = message.chat.id
    txt = message.text
    state = current_state(chat_id)

    # –í–µ—Å—å generic_handler –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –∫–æ–¥—É —Å—é–¥–∏ –≤—Å—Ç–∞–≤–ª—è—î—Ç—å—Å—è
    # –í—ñ–Ω –æ–±—Ä–æ–±–ª—è—î –¥–æ–¥–∞–≤–∞–Ω–Ω—è, —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è, –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤

# =======================
# –°–¢–ê–†–¢ –ë–û–¢–ê
# =======================
bot.infinity_polling()